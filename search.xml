<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[openstack性能测试]]></title>
      <url>/posts/Openstack%20performance%20testing.html</url>
      <content type="html"><![CDATA[<h3 id="文档说明"><a href="#文档说明" class="headerlink" title="文档说明"></a>文档说明</h3><hr>
<p>本文档验证在openstack ocata环境上开展自动化测试，性能测试，压力测试。</p>
<a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>openstack ocata for kolla环境一台（多节点，三个控制也做计算存储）</p>
<h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><h4 id="Tempest-介绍"><a href="#Tempest-介绍" class="headerlink" title="Tempest 介绍"></a>Tempest 介绍</h4><p>目前Tempest 的测试代码，包括计算、认证、镜像管理、网络、对象存储、块存储 六个核心模块。</p>
<p><img src="https://ljw.howieli.cn/blog/2017-9-8/tempest.png" alt=""></p>
<h4 id="Tempest-安装"><a href="#Tempest-安装" class="headerlink" title="Tempest 安装"></a>Tempest 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]<span class="comment"># vim /etc/kolla/globals.yml</span></div><div class="line">enable_tempest: <span class="string">"yes"</span></div><div class="line">[root@control01 ~]<span class="comment"># kolla-ansible -i multinode deploy</span></div><div class="line">[root@control01 ~]<span class="comment"># docker ps |grep tempest</span></div><div class="line">06512704e13e        172.18.22.162:4000/99cloud/centos-source-tempest:animbus-5.2.0                     <span class="string">"kolla_start"</span>            8 days ago          Up 8 days                                    tempest</div></pre></td></tr></table></figure>
<h4 id="Tempest-配置"><a href="#Tempest-配置" class="headerlink" title="Tempest 配置"></a>Tempest 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]<span class="comment"># docker exec -it -u root tempest bash</span></div><div class="line">(tempest)[root@control01 tempest-16.0.1.dev358]<span class="comment">#</span></div><div class="line">(tempest)[root@control01 tempest-16.0.1.dev358]<span class="comment"># vi /etc/tempest/tempest.conf</span></div><div class="line">image_ref = a1958f75-ae81-4b1d<span class="_">-a</span>167-213f4681856b</div><div class="line">image_ref_alt = a1958f75-ae81-4b1d<span class="_">-a</span>167-213f4681856b</div><div class="line">flavor_ref = 2</div><div class="line">flavor_ref_alt = 2</div><div class="line">public_network_id = f157770d<span class="_">-e</span>81c-41a3-acf1-8<span class="built_in">fc</span>3f4ea7f31</div><div class="line">floating_network_name = f157770d<span class="_">-e</span>81c-41a3-acf1-8<span class="built_in">fc</span>3f4ea7f31</div></pre></td></tr></table></figure>
<h4 id="测试执行"><a href="#测试执行" class="headerlink" title="测试执行"></a>测试执行</h4><h5 id="执行一个测试类"><a href="#执行一个测试类" class="headerlink" title="执行一个测试类"></a>执行一个测试类</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(tempest)[root@control01 tempest-16.0.1.dev358]<span class="comment"># ostestr --pdb tempest.api.compute.servers.test_create_server | tee tempest_compute.log</span></div></pre></td></tr></table></figure>
<p>测试输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">======</div><div class="line">Totals</div><div class="line">======</div><div class="line">Ran: 16 tests in 334.0000 sec.</div><div class="line"> - Passed: 12</div><div class="line"> - Skipped: 4</div><div class="line"> - Expected Fail: 0</div><div class="line"> - Unexpected Success: 0</div><div class="line"> - Failed: 0</div><div class="line">Sum of execute time for each test: 232.6021 sec.</div><div class="line"></div><div class="line">==============</div><div class="line">Worker Balance</div><div class="line">==============</div><div class="line"> - Worker 0 (16 tests) =&gt; 0:04:47.392702</div></pre></td></tr></table></figure></p>
<h5 id="执行多个项目下的所有测试，并输出subunit"><a href="#执行多个项目下的所有测试，并输出subunit" class="headerlink" title="执行多个项目下的所有测试，并输出subunit"></a>执行多个项目下的所有测试，并输出subunit</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(tempest)[root@control01 tempest-16.0.1.dev358]<span class="comment"># ostestr --no-pretty --subunit --regex '^tempest\.api\.(compute|identity|image|network|volume|object_storage)' | tee tempest_all.log</span></div></pre></td></tr></table></figure>
<p>测试输出<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Test id                                                                                                                                                               Runtime (s)</div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------------------------------------  -----------</div><div class="line">tempest.api.volume.test_volume_delete_cascade.VolumesDeleteCascade.test_volume_from_snapshot_cascade_delete[id-59a77ede-609b-4ee8-9f68-fc3c6ffe97b5]                  304.790</div><div class="line">tempest.api.image.v1.test_images.CreateRegisterImagesTest.test_register_http_image[id-6d0e13a7-515b-460c-b91f-9f4793f09816]                                           301.614</div><div class="line">tempest.api.compute.servers.test_attach_interfaces.AttachInterfacesTestJSON.test_create_list_show_delete_interfaces[id-73fe8f02-590d-4bf1-b184-e9ca81065051,network]  170.781</div><div class="line">tempest.api.compute.servers.test_delete_server.DeleteServersTestJSON.test_delete_server_while_in_shelved_state[id-bb0cb402-09dd-4947-b6e5-5e7e1cfa61ad]               153.487</div><div class="line">tempest.api.compute.volumes.test_attach_volume.AttachVolumeTestJSON.test_list_get_volume_attachments[id-7fa563fe-f0f7-43eb-9e22-a1ece036b513]                         105.981</div><div class="line">tempest.api.compute.images.test_images_oneserver.ImagesOneServerTestJSON.test_create_delete_image[id-3731d080-d4c5-4872-b41a-64d0d0021314]                             71.267</div><div class="line">tempest.api.volume.test_volumes_snapshots.VolumesSnapshotTestJSON.test_snapshot_create_delete_with_volume_in_use[compute,id-8567b54c-4455-446d-a1cf-651ddeaa3ff2]      69.934</div><div class="line">tempest.api.volume.test_volumes_snapshots.VolumesSnapshotTestJSON.test_snapshot_create_offline_delete_online[compute,id-5210a1de-85a0-11e6-bb21-641c676a5d61]          68.662</div><div class="line">tempest.api.compute.servers.test_delete_server.DeleteServersTestJSON.test_delete_server_while_in_shutoff_state[id-546d368c-bb6c-4645-979a-83ed16f3a6be]                61.945</div><div class="line">tempest.api.compute.servers.test_attach_interfaces.AttachInterfacesTestJSON.test_add_remove_fixed_ip[id-c7e0e60b-ee45-43d0-abeb-8596fd42a2f9,network,smoke]            60.422</div><div class="line"></div><div class="line">Slowest Tests:</div></pre></td></tr></table></figure></p>
<h4 id="转换测试结果为html文件"><a href="#转换测试结果为html文件" class="headerlink" title="转换测试结果为html文件"></a>转换测试结果为html文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(tempest)[root@control01 tempest-16.0.1.dev358]<span class="comment"># subunit2html tempest_all.log tempest.html</span></div></pre></td></tr></table></figure>
<h4 id="Tempest-执行时间很长，如何放到后台执行"><a href="#Tempest-执行时间很长，如何放到后台执行" class="headerlink" title="Tempest 执行时间很长，如何放到后台执行"></a>Tempest 执行时间很长，如何放到后台执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]<span class="comment"># screen -r tempest</span></div><div class="line">[root@control01 ~]<span class="comment"># docker exec -it -u root tempest ostestr --no-pretty --subunit --regex  '^tempest\.api\.(compute|identity|image|network|volume|object_storage)' | tee tempest_all.log</span></div></pre></td></tr></table></figure>
<p><code>screen</code>窗口键入<code>ctrl</code>+<code>a</code> <code>d</code>,退出<code>screen</code><br>再次进入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]<span class="comment"># screen -r tempest</span></div></pre></td></tr></table></figure></p>
<h4 id="执行测试后提示：No-testr-conf-config-file"><a href="#执行测试后提示：No-testr-conf-config-file" class="headerlink" title="执行测试后提示：No .testr.conf config file"></a>执行测试后提示：No .testr.conf config file</h4><p>需要切换到<code>/tempest-source/tempest-16.0.1.dev358</code>目录执行，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(tempest)[root@control01 tempest-16.0.1.dev358]<span class="comment"># ls .testr.conf</span></div><div class="line">.testr.conf</div><div class="line">(tempest)[root@control01 tempest-16.0.1.dev358]<span class="comment"># pwd</span></div><div class="line">/tempest-source/tempest-16.0.1.dev358</div><div class="line">(tempest)[root@control01 tempest-16.0.1.dev358]<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><h4 id="Rally介绍"><a href="#Rally介绍" class="headerlink" title="Rally介绍"></a>Rally介绍</h4><p><img src="https://ljw.howieli.cn/blog/2017-9-8/rally.png" alt=""></p>
<p>详情请看官方文档：<a href="https://wiki.openstack.org/wiki/Rally" target="_blank" rel="external">参考文档</a></p>
<h4 id="安装Rally"><a href="#安装Rally" class="headerlink" title="安装Rally"></a>安装Rally</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]<span class="comment"># vim /etc/kolla/globals.yml</span></div><div class="line">enable_rally: <span class="string">"yes"</span></div><div class="line">[root@control01 ~]<span class="comment"># kolla-ansible -i multinode deploy</span></div><div class="line">[root@control01 ~]<span class="comment"># docker ps |grep rally</span></div><div class="line">b239cb679134        172.18.22.162:4000/99cloud/centos-source-rally:animbus-5.2.0                       <span class="string">"kolla_start"</span>            8 days ago          Up 8 days                                    rally</div></pre></td></tr></table></figure>
<h4 id="Rally-配置"><a href="#Rally-配置" class="headerlink" title="Rally 配置"></a>Rally 配置</h4><h5 id="认证配置"><a href="#认证配置" class="headerlink" title="认证配置"></a>认证配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]<span class="comment"># docker cp /etc/kolla/admin-openrc.sh rally:/</span></div><div class="line">[root@control01 ~]<span class="comment"># docker exec -it -u root rally bash</span></div><div class="line">(rally)[root@control01 /]<span class="comment"># source admin-openrc.sh</span></div><div class="line">(rally)[root@control01 /]<span class="comment"># openstack image list</span></div></pre></td></tr></table></figure>
<h5 id="创建deployment"><a href="#创建deployment" class="headerlink" title="创建deployment"></a>创建deployment</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(rally)[root@control01 /]<span class="comment"># rally deployment create --fromenv --name ljw</span></div><div class="line">+--------------------------------------+---------------------+------+------------------+--------+</div><div class="line">| uuid                                 | created_at          | name | status           | active |</div><div class="line">+--------------------------------------+---------------------+------+------------------+--------+</div><div class="line">| 66dea2c5-bef5-41ac-8a83-1d80f0d3755f | 2017-09-12T05:55:54 | ljw  | deploy-&gt;finished |        |</div><div class="line">+--------------------------------------+---------------------+------+------------------+--------+</div></pre></td></tr></table></figure>
<h4 id="配置测试方案"><a href="#配置测试方案" class="headerlink" title="配置测试方案"></a>配置测试方案</h4><p>测试方案：</p>
<ul>
<li>使用image cirros创建10GB大小云硬盘</li>
<li>然后用此与硬盘、flavor m1.tiny创建虚拟机，并发是1，执行100次，使用20个租户，每个租户下面2个用户</li>
</ul>
<p>编辑测试脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">(rally)[root@control01 /]<span class="comment"># vi boot-from-volume.json</span></div><div class="line">&#123;% <span class="built_in">set</span> flavor_name = flavor_name or <span class="string">"m1.tiny"</span> %&#125;</div><div class="line">&#123;% <span class="built_in">set</span> volume_type = volume_type or <span class="string">""</span> %&#125;</div><div class="line">&#123;</div><div class="line">    <span class="string">"NovaServers.boot_server_from_volume"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"args"</span>: &#123;</div><div class="line">                <span class="string">"flavor"</span>: &#123;</div><div class="line">                    <span class="string">"name"</span>: <span class="string">"&#123;&#123;flavor_name&#125;&#125;"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"image"</span>: &#123;</div><div class="line">                    <span class="string">"name"</span>: <span class="string">"^cirros"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="string">"volume_size"</span>: 10,</div><div class="line">                <span class="string">"volume_type"</span>: <span class="string">"&#123;&#123;volume_type&#125;&#125;"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="string">"runner"</span>: &#123;</div><div class="line">                <span class="string">"type"</span>: <span class="string">"constant"</span>,</div><div class="line">                <span class="string">"times"</span>: 100,</div><div class="line">                <span class="string">"concurrency"</span>: 1</div><div class="line">            &#125;,</div><div class="line">            <span class="string">"context"</span>: &#123;</div><div class="line">                <span class="string">"users"</span>: &#123;</div><div class="line">                    <span class="string">"tenants"</span>: 20,</div><div class="line">                    <span class="string">"users_per_tenant"</span>: 2</div><div class="line">                &#125;,</div><div class="line">                <span class="string">"quotas"</span>: &#123;</div><div class="line">                    <span class="string">"nova"</span>: &#123;</div><div class="line">                        <span class="string">"instances"</span>: 20</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>导出测试报告<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(rally)[root@control01 /]<span class="comment"># rally task report b77ccde5-ceb7-444a-b9a9-75f0ff40b480 --out boot_server.html</span></div></pre></td></tr></table></figure></p>
<p>从容器中导出测试报告<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]<span class="comment"># docker cp rally:/boot_server.html .</span></div></pre></td></tr></table></figure></p>
<h4 id="分析测试报告"><a href="#分析测试报告" class="headerlink" title="分析测试报告"></a>分析测试报告</h4><p>可以用Google Chrome浏览器分析<br><img src="https://ljw.howieli.cn/blog/2017-9-8/rally测试报告.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tempest rally </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kolla搭建octavia]]></title>
      <url>/posts/kolla-octavia.html</url>
      <content type="html"><![CDATA[<h3 id="octavia-介绍"><a href="#octavia-介绍" class="headerlink" title="octavia 介绍"></a>octavia 介绍</h3><hr>
<p>openstack octavia 是 openstack Lbaas项目分出来的一个子项目，是提供虚拟机流量负载均衡，其实oactavia就是调用nova以及neutron的api生成两台安装好了haproxy和keepalived软件的虚拟机，并连接到目标网络。octavia共有4个组件housekeeping,worker,api,health-manager。详情请参考 <a href="https://docs.openstack.org/octavia/latest/reference/introduction.html" target="_blank" rel="external">octavia介绍</a></p>
<a id="more"></a>
<h3 id="octavia-架构图"><a href="#octavia-架构图" class="headerlink" title="octavia 架构图"></a>octavia 架构图</h3><p><img src="https://ljw.howieli.cn/blog/2017-9-8/octavia架构图.png" alt=""></p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>我事先准备好了一个kolla部署的多节点的openstack环境<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> openstack service list</div><div class="line">+----------------------------------+------------------+-------------------------+</div><div class="line">| ID                               | Name             | Type                    |</div><div class="line">+----------------------------------+------------------+-------------------------+</div><div class="line">| 11bb0c086a484e33bf65558298a13f2d | manila           | share                   |</div><div class="line">| 126fb7d3b45f44008f9b5649e7fa6772 | glance           | image                   |</div><div class="line">| 1963c13ceda74eaa846ce53447aa9663 | swift            | object-store            |</div><div class="line">| 1d73b2481e0e4c2996e902282f53ac94 | ceilometer       | metering                |</div><div class="line">| 277ac4e4d36b4170a13dff885133d497 | cinderv3         | volumev3                |</div><div class="line">| 313e8abeeb5f46968e21c47be64fe37a | panko            | event                   |</div><div class="line">| 3546da190ebe4cb69a5e4054c1b226e8 | ironic-inspector | baremetal-introspection |</div><div class="line">| 3559efb2c60c4532b0e20f4280d00d65 | gnocchi          | metric                  |</div><div class="line">| 38fa732db46a4bf99a656cc4b29f9955 | trove            | database                |</div><div class="line">| 5003dabefad4462f80758eecc883a185 | sahara           | data_processing         |</div><div class="line">| 5b3ab9520859475fb874e570be8ea064 | manilav2         | sharev2                 |</div><div class="line">| 659cd19c052b452a8a954bbadfd94a5a | nova             | compute                 |</div><div class="line">| 72fcd0fc324248bdb8c5f08f9c65a1ea | nova_legacy      | compute_legacy          |</div><div class="line">| 754afe3e3b4349a0a54d26b7d83fec5e | cinder           | volume                  |</div><div class="line">| 85c1d57869754c38989f228c08896d4c | ironic           | baremetal               |</div><div class="line">| 9962758f42c140c4b811940bdc4041b2 | heat             | orchestration           |</div><div class="line">| b7dc29ababc54104b31ad3b999eae6b5 | heat-cfn         | cloudformation          |</div><div class="line">| bee93d265f994dd3bd9e76a326df0d1b | cinderv2         | volumev2                |</div><div class="line">| d6f1862a19434267a4a51fd4c8a6d665 | neutron          | network                 |</div><div class="line">| ee90e0f359d84c1eb35c3cd9423f43db | placement        | placement               |</div><div class="line">| f7b5b57d52494869ab20501c28237613 | cloudkitty       | rating                  |</div><div class="line">| fdb4e5b1658d4d39a1f807f9d7b2b4d7 | keystone         | identity                |</div><div class="line">+----------------------------------+------------------+-------------------------+</div></pre></td></tr></table></figure></p>
<h3 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> git clone https://review.openstack.org/p/openstack/octavia</div><div class="line"><span class="meta">#</span> cd octavia</div><div class="line"><span class="meta">#</span> grep octavia_ca /etc/kolla/passwords.yml</div><div class="line">octavia_ca_password: mEUyBHLopKk501CX30WRnPuiDmoP3I7eNQIQbC6z</div><div class="line"><span class="meta">#</span> sed -i 's/foobar/mEUyBHLopKk501CX30WRnPuiDmoP3I7eNQIQbC6z/g' bin/create_certificates.sh</div><div class="line"><span class="meta">#</span> ./bin/create_certificates.sh cert $(pwd)/etc/certificates/openssl.cnf</div></pre></td></tr></table></figure>
<p>然后你会得到一个文件夹<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> ls -al cert/</div><div class="line">total 48</div><div class="line">drwxr-xr-x  4 root root  219 Sep  7 09:32 .</div><div class="line">drwxr-xr-x 17 root root 4096 Sep  7 09:32 ..</div><div class="line">-rw-r--r--  1 root root 1294 Sep  7 09:32 ca_01.pem</div><div class="line">-rw-r--r--  1 root root  989 Sep  7 09:32 client.csr</div><div class="line">-rw-r--r--  1 root root 1708 Sep  7 09:32 client.key</div><div class="line">-rw-r--r--  1 root root 4401 Sep  7 09:32 client-.pem</div><div class="line">-rw-r--r--  1 root root 6109 Sep  7 09:32 client.pem</div><div class="line">-rw-r--r--  1 root root   71 Sep  7 09:32 index.txt</div><div class="line">-rw-r--r--  1 root root   21 Sep  7 09:32 index.txt.attr</div><div class="line">-rw-r--r--  1 root root    0 Sep  7 09:32 index.txt.old</div><div class="line">drwxr-xr-x  2 root root   20 Sep  7 09:32 newcerts</div><div class="line">drwx------  2 root root   23 Sep  7 09:32 private</div><div class="line">-rw-r--r--  1 root root    3 Sep  7 09:32 serial</div><div class="line">-rw-r--r--  1 root root    3 Sep  7 09:32 serial.old</div></pre></td></tr></table></figure></p>
<p>将认证放到kolla部署节点上的/etc/kolla/octavia目录里，首先要先在/etc/kolla目录下创建一个octavia文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> mkdir /etc/kolla/config/octavia</div><div class="line"><span class="meta">#</span> ls -al /etc/kolla/config/octavia/</div><div class="line">total 20</div><div class="line">drwxr-xr-x 2 root root   58 Sep  8 12:37 .</div><div class="line">drwxr-xr-x 5 root root 4096 Sep  8 12:36 ..</div><div class="line">-rw-r--r-- 1 root root 1294 Sep  8 12:37 ca_01.pem</div><div class="line">-rw-r--r-- 1 root root 1743 Sep  8 12:37 cakey.pem</div><div class="line">-rw-r--r-- 1 root root 6109 Sep  8 12:37 client.pem</div></pre></td></tr></table></figure></p>
<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># pwd</div><div class="line">/root</div><div class="line"># cd octavia/diskimage-create/</div><div class="line"># ./diskimage-create.sh -i centos</div></pre></td></tr></table></figure>
<p>会产生amphora-x64-haproxy.qcow2镜像<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> ls amphora-x64-haproxy.qcow2</div><div class="line">amphora-x64-haproxy.qcow2</div></pre></td></tr></table></figure></p>
<p>上传镜像，因为我kolla部署openstack时候后端存储用的ceph，所以首先要把镜像转换成raw格式,然后在上传镜像，上传镜像必须给镜像打一个amphora的tag。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> qemu-img convert -f qcow2 -O raw amphora-x64-haproxy.qcow2 amphora-x64-haproxy.raw</div><div class="line"><span class="meta">#</span> qemu-img info amphora-x64-haproxy.raw</div><div class="line">image: amphora-x64-haproxy.raw</div><div class="line">file format: raw</div><div class="line">virtual size: 2.0G (2147483648 bytes)</div><div class="line">disk size: 1.5G</div><div class="line"><span class="meta">#</span> openstack image create --container-format bare --disk-format raw --private --file amphora-x64-haproxy.raw --tag amphora amphora</div></pre></td></tr></table></figure></p>
<h3 id="准备openstack资源"><a href="#准备openstack资源" class="headerlink" title="准备openstack资源"></a>准备openstack资源</h3><p>octavia_amp_boot_network_list 网络,这里需要准备分给octavia用的网络ID,而且这个网络必须能和api互通<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> openstack network create --provider-physical-network physnet1 \</div><div class="line">    --provider-network-type vlan --provider-segment 121 lb-net</div><div class="line"><span class="meta">#</span> openstack subnet create --allocation-pool --network lb-net --subnet-range 10.140.1.0/24 \</div><div class="line">    lb-subnet</div></pre></td></tr></table></figure></p>
<p>还需要octavia_amp_flavor_id 值,这是octavia创建的虚拟机的大小。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> openstack flavor create --disk 40 --private --ram 4096 --vcpus 2 octavia_flavor</div></pre></td></tr></table></figure></p>
<p>创建一个octavia的安全组，安全组的id值为octavia_amp_secgroup_list 值<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> openstack security group create --description 'used by Octavia amphora instance' octavia</div></pre></td></tr></table></figure></p>
<p>为octavia安全组设置规则<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> openstack security group rule create --protocol icmp f97161c4-ffda-4205-b984-d3ecad0f9ce1</div><div class="line"><span class="meta">#</span> openstack security group rule create --protocol tcp --dst-port 5555 --egress f97161c4-ffda-4205-b984-d3ecad0f9ce1</div><div class="line"><span class="meta">#</span> openstack security group rule create --protocol tcp --dst-port 9443 --ingress f97161c4-ffda-4205-b984-d3ecad0f9ce1</div></pre></td></tr></table></figure></p>
<p>octavia 机器启动时注入的  key, octavia_ssh_key 名字是固定的，需要和 octavia.conf 配置文件相同。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> openstack keypair create --public-key /root/.ssh/id_rsa.pub octavia_ssh_key</div></pre></td></tr></table></figure></p>
<h3 id="更改globas-yml文件"><a href="#更改globas-yml文件" class="headerlink" title="更改globas.yml文件"></a>更改globas.yml文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> vim /etc/kolla/globals.yml</div><div class="line">enable_horizon_neutron_lbaas: "yes"</div><div class="line">enable_neutron_lbaas: "yes"</div><div class="line">enable_octavia: yes</div><div class="line"><span class="meta">#</span> Load balancer topology options are [ SINGLE, ACTIVE_STANDBY ]</div><div class="line">octavia_loadbalancer_topology: "ACTIVE_STANDBY"</div><div class="line">octavia_amp_boot_network_list: ffc00802-c88b-4a5e-a51b-60071f4045d5</div><div class="line">octavia_amp_secgroup_list: f97161c4-ffda-4205-b984-d3ecad0f9ce1</div><div class="line">octavia_amp_flavor_id: 54f2cc50-81d4-44d3-8e44-a01686e4b2c6</div></pre></td></tr></table></figure>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> kolla-ansible deploy -i multinode</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> octavia </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ironic裸机服务使用说明]]></title>
      <url>/posts/ironic-instruction.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><hr>
<p>“裸机功能使用说明”介绍了裸机配置中的一些技术细节，旨在帮助用户更好地了解和使用 ironic。</p>
<a id="more"></a>
<hr>
<h3 id="whole-disk镜像和partition镜像区别"><a href="#whole-disk镜像和partition镜像区别" class="headerlink" title="whole disk镜像和partition镜像区别"></a>whole disk镜像和partition镜像区别</h3><hr>
<p>partition image部署可以支持windows系统，但是不支持自定义分区，因为分区表在制作镜像时已经被确定下来。但partition image支持按照配置中规定的root,swap分区来自动进行磁盘分区。</p>
<p>partition image方式部署的机器将kernel和ramdisk都存放在tftp server上，每次启动都需要访问tftp,whole disk部署的服务器启动时不需要访问tftp server。</p>
<hr>
<h3 id="noop，neutron和flat简介"><a href="#noop，neutron和flat简介" class="headerlink" title="noop，neutron和flat简介"></a>noop，neutron和flat简介</h3><hr>
<p>noop ：用于stand alone(不和OpenStack集成的模式)部署用的网络模式，在部署过程不进行任何的网络切换。</p>
<p>neutron ：通过与provide的网络集成来提供租户定义的网络，同时还将租户网络与provision network和cleaning network网络分开。</p>
<p>flat ：用于提供外网访问和部署的二层网络,provision network和cleaning network网络可以放在一起，也可以分开。</p>
<h3 id="IPMI带内（in-band）信道和带外（out-of-band）信道"><a href="#IPMI带内（in-band）信道和带外（out-of-band）信道" class="headerlink" title="IPMI带内（in band）信道和带外（out of band）信道"></a>IPMI带内（in band）信道和带外（out of band）信道</h3><hr>
<p>IPMI 信道分为带内信道和带外信道两种类型，但配置裸机并不是按照带内和带外信道的方式来划分驱动。</p>
<p>带内和带外的区别主要体现在不同行为的的管理方式上,例如检查时，通过agent发现硬件属性就是带内的管理方式，通过ilo rest接口查询就是带外的方式；部署时，通过iscsi部署是带外的部署方式，通过agent部署是带内的部署方式。</p>
<hr>
<h3 id="裸机配置状态介绍"><a href="#裸机配置状态介绍" class="headerlink" title="裸机配置状态介绍"></a>裸机配置状态介绍</h3><hr>
<p><img src="https://ljw.howieli.cn/blog/2017-9-8/ironic.png" alt=""><br>注册（Enroll)：所有节点的初始状态，代表节点已经存在，但在这种状态下无法对节点进行下一步操作。</p>
<p>当获取到节点信息以及驱动详情后，可通过调用manage API，使节点过渡到验证状态。</p>
<p>验证（Verifying)：ironic会对节点的驱动和证书进行验证，验证成功后节点的配置状态将过渡到可管理状态。</p>
<p>可管理（Manageable)：此时，可对节点进行管理（包括电源状态等）。此时节点可以：</p>
<pre><code>从清理中（Cleaning）到可管理，通过调用clean API；
从检查中（Inspecting）到可管理，通过调用inspect API；
通过清理中（Cleaning）到Available，通过调用provide API。
</code></pre><p>检查（Inspecting)：检查过程将调用节点的自我检查功能来更新节点的硬件属性。如果检查失败配置状态将过渡到检查失败（inspectfail）。</p>
<p>清理中（Cleaning):节点通过清理确保自身能够成功过渡到可用状态（Available）。清理过程中的任务包括：</p>
<pre><code>清除驱动器
验证硬件完整性
验证节点中的配置信息和物理硬件的配置是否一致。
启动Ramdisk内核
</code></pre><p>当节点处于清理状态，如果使用带外信道（out of band)则控制器会进入清理步骤，如果是带内信道（in band)方式，控制器会开始为安装磁盘做环境准备。</p>
<p>可用（Available):处于可用状态下的节点已经进行过清理和预配置过程，在可用状态下：</p>
<pre><code>通过调用active API过渡到活跃状态（Active)；
通过调用manage API过渡到可管理状态(Manageable)
</code></pre><p>配置中（Deploying):处于配置中的节点，正在为裸机的创建作积极准备。这一过程中会运行一系列短暂任务，如：</p>
<pre><code>配置BIOS；
部署分区、安装文件系统驱动；
创建额外的资源（如：网络配置）以及其他附加
</code></pre><p>的子系统要求；</p>
<p>活跃（Active):节点上有裸机在运行，此时节点可：</p>
<pre><code>通过调用rescue API过渡到维护（Rescue）状态；
通过调用delete API过渡到可用状态（Available)；
通过调用rebuild API过渡到活跃状态（Active).
</code></pre><p>删除中（Deleting)：在删除状态下，部署在节点上的裸机会删除。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kolla </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kolla搭建ironic裸机服务]]></title>
      <url>/posts/kolla-ironic.html</url>
      <content type="html"><![CDATA[<h3 id="内容说明"><a href="#内容说明" class="headerlink" title="内容说明"></a>内容说明</h3><p>  本文介绍在kolla 管理虚拟机配置流程，包括部署ironic和 裸机管理配置两部分，实现在flat 网络下管理裸机。</p>
<a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>在kolla 环境上增加裸机管理功能。</p>
<p>由于ironic 在管理裸机时需要一个网络来管理裸机的部署和清理。所以需要在部署ironic 前先创建一个flat类型的provision network 网络。本文档业务网络和provision network 网络共用一个。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# source /etc/kolla/admin-openrc.sh</div><div class="line">[root@control01 ~]# openstack network create --provider-physical-network physnet1 \</div><div class="line">    --provider-network-type flat provision-net</div><div class="line">[root@control01 ~]# openstack subnet create --allocation-pool start=172.18.23.1,end=172.18.23.199 \</div><div class="line">    --network provision-net --subnet-range 172.18.23.0.0/24 \</div><div class="line">    --gateway 172.18.151.1 provision-subnet</div></pre></td></tr></table></figure></p>
<h3 id="部署ironic"><a href="#部署ironic" class="headerlink" title="部署ironic"></a>部署ironic</h3><h4 id="修改globals-yml文件"><a href="#修改globals-yml文件" class="headerlink" title="修改globals.yml文件"></a>修改globals.yml文件</h4><p>ironic_cleaning_network 是上面创建的provision network网络ID。 ironic_dnsmasq_dhcp_range 可以随便定义一个，并不会用到，是为了保证ironic_dnsmasq 容器启动正常。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# vim /etc/kolla/globals.yml</div><div class="line">ironic_cleaning_network: "f157770d-e81c-41a3-acf1-8fc3f4ea7f31"</div><div class="line">ironic_dnsmasq_dhcp_range: "172.18.22.210,172.18.22.219"</div><div class="line">enable_horizon_ironic: "&#123;&#123; enable_ironic | bool &#125;&#125;"</div><div class="line">enable_ironic: "yes"</div><div class="line">enable_nova_serialconsole_proxy: "yes"</div></pre></td></tr></table></figure></p>
<h4 id="准备ironic-agent镜像"><a href="#准备ironic-agent镜像" class="headerlink" title="准备ironic-agent镜像"></a>准备ironic-agent镜像</h4><p>ironic-agent 镜像是在联网环境下通过diskimage-builder 生成, 参考官方文档 <a href="https://docs.openstack.org/ironic/latest/install/deploy-ramdisk.html#disk-image-builder" target="_blank" rel="external">disk-image-builder</a>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# pip install diskimage-builder</div><div class="line">[root@control01 ~]# disk-image-create ironic-agent fedora -o ironic-agent</div></pre></td></tr></table></figure></p>
<p>上传镜像<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# source /etc/kolla/admin-openrc.sh</div><div class="line">[root@control01 ~]# glance image-create --name deploy-vmlinuz \</div><div class="line">    --visibility public  --disk-format aki \</div><div class="line">    --container-format aki --file ./ironic-agent.vmlinuz</div><div class="line">[root@control01 ~]# glance image-create --name deploy-initrd \</div><div class="line">    --visibility public --disk-format ari \</div><div class="line">    --container-format ari --file ./ironic-agent.initramfs</div></pre></td></tr></table></figure></p>
<p>把ironic-agent.initramfs ironic-agent.kernel放到/etc/kolla/config/ironic目录下。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# cd /etc/kolla/config/ironic</div><div class="line">[root@control01 ~]# ls</div><div class="line">ironic-agent.initramfs ironic-agent.kernel</div></pre></td></tr></table></figure></p>
<h4 id="配置ironic-conf"><a href="#配置ironic-conf" class="headerlink" title="配置ironic.conf"></a>配置ironic.conf</h4><p>配置drivers 为支持远程console 的pxe_ipmitool_socat<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# cat /etc/kolla/config/ironic.conf</div><div class="line">[DEFAULT]</div><div class="line">enabled_drivers = pxe_ipmitool_socat,pxe_ipmitool</div><div class="line">enabled_hardware_types = ipmi</div><div class="line">enabled_network_interfaces=noop,flat</div><div class="line">enabled_power_interfaces = ipmitool</div><div class="line">enabled_management_interfaces = ipmitool</div><div class="line"></div><div class="line">[neutron]</div><div class="line"><span class="meta">#</span><span class="bash">After deploy the OpenStack, Update the cleaning_network</span></div><div class="line"><span class="meta">#</span><span class="bash">cleaning_network = externel</span></div><div class="line"></div><div class="line">[conductor]</div><div class="line">sync_power_state_interval = 10</div><div class="line">power_state_sync_max_retries = 20</div><div class="line"><span class="meta">#</span><span class="bash">power_state_change_timeout = 30</span></div><div class="line">deploy_callback_timeout = 900</div><div class="line">force_power_state_during_sync = true</div><div class="line"></div><div class="line">[pxe]</div><div class="line"><span class="meta">#</span><span class="bash">uefi_pxe_bootfile_name = bootx64.efi</span></div><div class="line"><span class="meta">#</span><span class="bash">After deploy the OpenStack, Update the tftp_server</span></div><div class="line"><span class="meta">#</span><span class="bash">tftp_server =</span></div><div class="line"><span class="meta">#</span><span class="bash">pxe_append_params = coreos.autologin rd.auto=1 nofb nomodeset vga=normal console=ttyS0,115200n8</span></div><div class="line">pxe_append_params = nofb nomodeset vga=normal console=tty0 console=ttyS0,115200n8</div><div class="line"></div><div class="line">[disk_utils]</div><div class="line"><span class="meta">#</span><span class="bash">default interval is 1 second</span></div><div class="line">iscsi_verify_attempts = 30</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> cat /etc/kolla/config/ironic.conf</span></div><div class="line"></div><div class="line">[DEFAULT]</div><div class="line">enabled_drivers = pxe_ipmitool_socat</div><div class="line">enabled_network_interfaces=noop,flat</div><div class="line"></div><div class="line">[pxe]</div><div class="line">pxe_append_params = nofb nomodeset vga=normal console=tty0 console=ttyS0,115200n8</div></pre></td></tr></table></figure></p>
<h3 id="检查部署"><a href="#检查部署" class="headerlink" title="检查部署"></a>检查部署</h3><h4 id="部署检查"><a href="#部署检查" class="headerlink" title="部署检查"></a>部署检查</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# kolla-ansible -i multinode prechecks</div></pre></td></tr></table></figure>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# kolla-ansible -i multinode deploy</div></pre></td></tr></table></figure>
<h4 id="部署后检查"><a href="#部署后检查" class="headerlink" title="部署后检查"></a>部署后检查</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# ironic driver-list</div><div class="line">+---------------------+---------------------------------+</div><div class="line">| Supported driver(s) | Active host(s)                  |</div><div class="line">+---------------------+---------------------------------+</div><div class="line">| ipmi                | control02, control03, control01 |</div><div class="line">| pxe_ipmitool        | control02, control03, control01 |</div><div class="line">| pxe_ipmitool_socat  | control02, control03, control01 |</div><div class="line">+---------------------+---------------------------------+</div><div class="line">[root@control01 ~]# nova service-list</div><div class="line">+-----+------------------+------------------+----------+---------+-------+----------------------------+-----------------+</div><div class="line">| Id  | Binary           | Host             | Zone     | Status  | State | Updated_at                 | Disabled Reason |</div><div class="line">+-----+------------------+------------------+----------+---------+-------+----------------------------+-----------------+</div><div class="line">| 4   | nova-scheduler   | control02        | internal | enabled | up    | 2017-08-31T01:48:41.000000 | -               |</div><div class="line">| 10  | nova-scheduler   | control01        | internal | enabled | up    | 2017-08-31T01:48:37.000000 | -               |</div><div class="line">| 22  | nova-conductor   | control02        | internal | enabled | up    | 2017-08-31T01:48:40.000000 | -               |</div><div class="line">| 31  | nova-conductor   | control01        | internal | enabled | up    | 2017-08-31T01:48:39.000000 | -               |</div><div class="line">| 61  | nova-consoleauth | control02        | internal | enabled | up    | 2017-08-31T01:48:36.000000 | -               |</div><div class="line">| 64  | nova-consoleauth | control01        | internal | enabled | up    | 2017-08-31T01:48:42.000000 | -               |</div><div class="line">| 67  | nova-compute     | control02        | nova     | enabled | up    | 2017-08-31T01:48:40.000000 | -               |</div><div class="line">| 70  | nova-compute     | control01        | nova     | enabled | up    | 2017-08-31T01:48:36.000000 | -               |</div><div class="line">| 76  | nova-scheduler   | control03        | internal | enabled | up    | 2017-08-31T01:48:42.000000 | -               |</div><div class="line">| 82  | nova-conductor   | control03        | internal | enabled | up    | 2017-08-31T01:48:36.000000 | -               |</div><div class="line">| 91  | nova-consoleauth | control03        | internal | enabled | up    | 2017-08-31T01:48:43.000000 | -               |</div><div class="line">| 94  | nova-compute     | control03        | nova     | enabled | up    | 2017-08-31T01:48:44.000000 | -               |</div><div class="line">| 97  | nova-compute     | control03-ironic | nova     | enabled | up    | 2017-08-31T01:48:44.000000 | -               |</div><div class="line">| 100 | nova-compute     | control02-ironic | nova     | enabled | up    | 2017-08-31T01:48:42.000000 | -               |</div><div class="line">| 103 | nova-compute     | control01-ironic | nova     | enabled | up    | 2017-08-31T01:48:43.000000 | -               |</div><div class="line">+-----+------------------+------------------+----------+---------+-------+----------------------------+-----------------+</div></pre></td></tr></table></figure>
<h3 id="使用ironic-管理物理服务器"><a href="#使用ironic-管理物理服务器" class="headerlink" title="使用ironic 管理物理服务器"></a>使用ironic 管理物理服务器</h3><p>每一台需要管理的裸机，都要创建为一个ironic node ，包括ipmi、服务器配置等信息。 再为ironic node 配置管理网卡的信息。</p>
<h4 id="创建ironic-node"><a href="#创建ironic-node" class="headerlink" title="创建ironic node"></a>创建ironic node</h4><p>创建ironic node,配置网络接口为flat<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# export IRONIC_API_VERSION=1.20</div><div class="line">[root@control01 ~]# ironic node-create -d pxe_ipmitool_socat --network-interface flat -n node1</div><div class="line">+-------------------+--------------------------------------+</div><div class="line">| Property          | Value                                |</div><div class="line">+-------------------+--------------------------------------+</div><div class="line">| chassis_uuid      | None                                 |</div><div class="line">| driver            | pxe_ipmitool_socat                   |</div><div class="line">| driver_info       | &#123;&#125;                                   |</div><div class="line">| extra             | &#123;&#125;                                   |</div><div class="line">| name              | node1                                |</div><div class="line">| network_interface | flat                                 |</div><div class="line">| properties        | &#123;&#125;                                   |</div><div class="line">| resource_class    |                                      |</div><div class="line">| uuid              | c78f0257-bfbf-489c-b525-a39e0b924b79 |</div><div class="line">+-------------------+--------------------------------------+</div></pre></td></tr></table></figure></p>
<h4 id="配置ironic-node-信息"><a href="#配置ironic-node-信息" class="headerlink" title="配置ironic node 信息"></a>配置ironic node 信息</h4><h5 id="配置ipmi信息"><a href="#配置ipmi信息" class="headerlink" title="配置ipmi信息"></a>配置ipmi信息</h5><p>ipmi_username,ipmi_password,ipmi_address 为裸机ipmi信息。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# NODE_UUID=$(ironic node-list|grep node1|awk -F "| " '&#123;print $2&#125;')</div><div class="line">[root@control01 ~]#  ironic node-update $NODE_UUID add     driver_info/ipmi_username=admin   \</div><div class="line"><span class="meta">&gt;</span><span class="bash">    driver_info/ipmi_password=admin     driver_info/ipmi_address=172.18.21.164 \</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">    driver_info/ipmi_terminal_port=8901</span></div><div class="line">+------------------------+------------------------------------------------------------------+</div><div class="line">| Property               | Value                                                            |</div><div class="line">+------------------------+------------------------------------------------------------------+</div><div class="line">| chassis_uuid           | None                                                             |</div><div class="line">| clean_step             | &#123;&#125;                                                               |</div><div class="line">| console_enabled        | False                                                            |</div><div class="line">| created_at             | 2017-08-31T01:50:09+00:00                                        |</div><div class="line">| driver                 | pxe_ipmitool_socat                                               |</div><div class="line">| driver_info            | &#123;u'ipmi_terminal_port': 8901, u'ipmi_address': u'172.18.21.164', |</div><div class="line">|                        | u'ipmi_username': u'admin', u'ipmi_password': u'******'&#125;         |</div><div class="line">| driver_internal_info   | &#123;&#125;                                                               |</div><div class="line">| extra                  | &#123;&#125;                                                               |</div><div class="line">| inspection_finished_at | None                                                             |</div><div class="line">| inspection_started_at  | None                                                             |</div><div class="line">| instance_info          | &#123;&#125;                                                               |</div><div class="line">| instance_uuid          | None                                                             |</div><div class="line">| last_error             | None                                                             |</div><div class="line">| maintenance            | False                                                            |</div><div class="line">| maintenance_reason     | None                                                             |</div><div class="line">| name                   | node1                                                            |</div><div class="line">| network_interface      | flat                                                             |</div><div class="line">| power_state            | None                                                             |</div><div class="line">| properties             | &#123;&#125;                                                               |</div><div class="line">| provision_state        | enroll                                                           |</div><div class="line">| provision_updated_at   | None                                                             |</div><div class="line">| raid_config            | &#123;&#125;                                                               |</div><div class="line">| reservation            | control02                                                        |</div><div class="line">| resource_class         |                                                                  |</div><div class="line">| target_power_state     | None                                                             |</div><div class="line">| target_provision_state | None                                                             |</div><div class="line">| target_raid_config     | &#123;&#125;                                                               |</div><div class="line">| updated_at             | 2017-08-31T01:51:40+00:00                                        |</div><div class="line">| uuid                   | c78f0257-bfbf-489c-b525-a39e0b924b79                             |</div><div class="line">+------------------------+------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<h4 id="配置ramdisk-kernel信息"><a href="#配置ramdisk-kernel信息" class="headerlink" title="配置ramdisk ,kernel信息"></a>配置ramdisk ,kernel信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# DEPLOY_VMLINUZ_UUID=$(glance image-list|grep deploy-vmlinuz|awk -F "| " '&#123;print $2&#125;')</div><div class="line">[root@control01 ~]# DEPLOY_INITRD_UUID=$(glance image-list|grep deploy-initrd|awk -F "| " '&#123;print $2&#125;')</div><div class="line">[root@control01 ~]# ironic node-update $NODE_UUID add     driver_info/deploy_kernel=$DEPLOY_VMLINUZ_UUID \</div><div class="line"><span class="meta">&gt;</span><span class="bash">     driver_info/deploy_ramdisk=<span class="variable">$DEPLOY_INITRD_UUID</span></span></div><div class="line">+------------------------+-----------------------------------------------------------------------+</div><div class="line">| Property               | Value                                                                 |</div><div class="line">+------------------------+-----------------------------------------------------------------------+</div><div class="line">| chassis_uuid           | None                                                                  |</div><div class="line">| clean_step             | &#123;&#125;                                                                    |</div><div class="line">| console_enabled        | False                                                                 |</div><div class="line">| created_at             | 2017-08-31T01:50:09+00:00                                             |</div><div class="line">| driver                 | pxe_ipmitool_socat                                                    |</div><div class="line">| driver_info            | &#123;u'ipmi_terminal_port': 8901, u'ipmi_username': u'admin',             |</div><div class="line">|                        | u'deploy_kernel': u'99a5c143-e231-4018-a6bf-121585eb6290',            |</div><div class="line">|                        | u'ipmi_address': u'172.18.21.164', u'deploy_ramdisk':                 |</div><div class="line">|                        | u'8c23e3e4-e749-4a91-9af7-63674b5f5128', u'ipmi_password': u'******'&#125; |</div><div class="line">| driver_internal_info   | &#123;&#125;                                                                    |</div><div class="line">| extra                  | &#123;&#125;                                                                    |</div><div class="line">| inspection_finished_at | None                                                                  |</div><div class="line">| inspection_started_at  | None                                                                  |</div><div class="line">| instance_info          | &#123;&#125;                                                                    |</div><div class="line">| instance_uuid          | None                                                                  |</div><div class="line">| last_error             | None                                                                  |</div><div class="line">| maintenance            | False                                                                 |</div><div class="line">| maintenance_reason     | None                                                                  |</div><div class="line">| name                   | node1                                                                 |</div><div class="line">| network_interface      | flat                                                                  |</div><div class="line">| power_state            | None                                                                  |</div><div class="line">| properties             | &#123;&#125;                                                                    |</div><div class="line">| provision_state        | enroll                                                                |</div><div class="line">| provision_updated_at   | None                                                                  |</div><div class="line">| raid_config            | &#123;&#125;                                                                    |</div><div class="line">| reservation            | control02                                                             |</div><div class="line">| resource_class         |                                                                       |</div><div class="line">| target_power_state     | None                                                                  |</div><div class="line">| target_provision_state | None                                                                  |</div><div class="line">| target_raid_config     | &#123;&#125;                                                                    |</div><div class="line">| updated_at             | 2017-08-31T01:52:16+00:00                                             |</div><div class="line">| uuid                   | c78f0257-bfbf-489c-b525-a39e0b924b79                                  |</div><div class="line">+------------------------+-----------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<h5 id="配置服务器硬件信息"><a href="#配置服务器硬件信息" class="headerlink" title="配置服务器硬件信息"></a>配置服务器硬件信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# ironic node-update $NODE_UUID add  properties/cpus=36  properties/memory_mb=129024 \</div><div class="line"><span class="meta">&gt;</span><span class="bash">     properties/local_gb=120     properties/cpu_arch=x86_64</span></div><div class="line">+------------------------+-----------------------------------------------------------------------+</div><div class="line">| Property               | Value                                                                 |</div><div class="line">+------------------------+-----------------------------------------------------------------------+</div><div class="line">| chassis_uuid           | None                                                                  |</div><div class="line">| clean_step             | &#123;&#125;                                                                    |</div><div class="line">| console_enabled        | False                                                                 |</div><div class="line">| created_at             | 2017-08-31T01:50:09+00:00                                             |</div><div class="line">| driver                 | pxe_ipmitool_socat                                                    |</div><div class="line">| driver_info            | &#123;u'ipmi_terminal_port': 8901, u'ipmi_username': u'admin',             |</div><div class="line">|                        | u'deploy_kernel': u'99a5c143-e231-4018-a6bf-121585eb6290',            |</div><div class="line">|                        | u'ipmi_address': u'172.18.21.164', u'deploy_ramdisk':                 |</div><div class="line">|                        | u'8c23e3e4-e749-4a91-9af7-63674b5f5128', u'ipmi_password': u'******'&#125; |</div><div class="line">| driver_internal_info   | &#123;&#125;                                                                    |</div><div class="line">| extra                  | &#123;&#125;                                                                    |</div><div class="line">| inspection_finished_at | None                                                                  |</div><div class="line">| inspection_started_at  | None                                                                  |</div><div class="line">| instance_info          | &#123;&#125;                                                                    |</div><div class="line">| instance_uuid          | None                                                                  |</div><div class="line">| last_error             | None                                                                  |</div><div class="line">| maintenance            | False                                                                 |</div><div class="line">| maintenance_reason     | None                                                                  |</div><div class="line">| name                   | node1                                                                 |</div><div class="line">| network_interface      | flat                                                                  |</div><div class="line">| power_state            | None                                                                  |</div><div class="line">| properties             | &#123;u'memory_mb': 129024, u'cpu_arch': u'x86_64', u'local_gb': 120,      |</div><div class="line">|                        | u'cpus': 36&#125;                                                          |</div><div class="line">| provision_state        | enroll                                                                |</div><div class="line">| provision_updated_at   | None                                                                  |</div><div class="line">| raid_config            | &#123;&#125;                                                                    |</div><div class="line">| reservation            | control02                                                             |</div><div class="line">| resource_class         |                                                                       |</div><div class="line">| target_power_state     | None                                                                  |</div><div class="line">| target_provision_state | None                                                                  |</div><div class="line">| target_raid_config     | &#123;&#125;                                                                    |</div><div class="line">| updated_at             | 2017-08-31T01:52:28+00:00                                             |</div><div class="line">| uuid                   | c78f0257-bfbf-489c-b525-a39e0b924b79                                  |</div><div class="line">+------------------------+-----------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<h5 id="开启控制台"><a href="#开启控制台" class="headerlink" title="开启控制台"></a>开启控制台</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]#  ironic node-set-console-mode $NODE_UUID true</div></pre></td></tr></table></figure>
<h4 id="创建ironic-port"><a href="#创建ironic-port" class="headerlink" title="创建ironic port"></a>创建ironic port</h4><p>MAC_ADDRESS 为裸机业务网络网卡MAC地址, 可以登录裸机IPMI查询。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# MAC_ADDRESS=08:9E:01:FC:48:7D</div><div class="line">[root@control01 ~]#  ironic port-create -n $NODE_UUID -a $MAC_ADDRESS</div><div class="line">+-----------------------+--------------------------------------+</div><div class="line">| Property              | Value                                |</div><div class="line">+-----------------------+--------------------------------------+</div><div class="line">| address               | 08:9e:01:fc:48:7d                    |</div><div class="line">| extra                 | &#123;&#125;                                   |</div><div class="line">| local_link_connection | &#123;&#125;                                   |</div><div class="line">| node_uuid             | c78f0257-bfbf-489c-b525-a39e0b924b79 |</div><div class="line">| portgroup_uuid        |                                      |</div><div class="line">| pxe_enabled           | True                                 |</div><div class="line">| uuid                  | 40158d94-76c2-4893-b081-075729ea210f |</div><div class="line">+-----------------------+--------------------------------------+</div></pre></td></tr></table></figure></p>
<h5 id="检查ironic-node"><a href="#检查ironic-node" class="headerlink" title="检查ironic node"></a>检查ironic node</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# ironic node-list</div><div class="line">+--------------------------------------+-------+---------------+-------------+--------------------+-------------+</div><div class="line">| UUID                                 | Name  | Instance UUID | Power State | Provisioning State | Maintenance |</div><div class="line">+--------------------------------------+-------+---------------+-------------+--------------------+-------------+</div><div class="line">| c78f0257-bfbf-489c-b525-a39e0b924b79 | node1 | None          | None        | enroll             | False       |</div><div class="line">+--------------------------------------+-------+---------------+-------------+--------------------+-------------+</div><div class="line">[root@control01 ~]# ironic node-show c78f0257-bfbf-489c-b525-a39e0b924b79</div><div class="line">+------------------------+--------------------------------------------------------------------------+</div><div class="line">| Property               | Value                                                                    |</div><div class="line">+------------------------+--------------------------------------------------------------------------+</div><div class="line">| chassis_uuid           | None                                                                     |</div><div class="line">| clean_step             | &#123;&#125;                                                                       |</div><div class="line">| console_enabled        | False                                                                    |</div><div class="line">| created_at             | 2017-08-31T01:50:09+00:00                                                |</div><div class="line">| driver                 | pxe_ipmitool_socat                                                       |</div><div class="line">| driver_info            | &#123;u'ipmi_terminal_port': 8901, u'ipmi_username': u'admin',                |</div><div class="line">|                        | u'deploy_kernel': u'99a5c143-e231-4018-a6bf-121585eb6290',               |</div><div class="line">|                        | u'ipmi_address': u'172.18.21.164', u'deploy_ramdisk':                    |</div><div class="line">|                        | u'8c23e3e4-e749-4a91-9af7-63674b5f5128', u'ipmi_password': u'******'&#125;    |</div><div class="line">| driver_internal_info   | &#123;&#125;                                                                       |</div><div class="line">| extra                  | &#123;&#125;                                                                       |</div><div class="line">| inspection_finished_at | None                                                                     |</div><div class="line">| inspection_started_at  | None                                                                     |</div><div class="line">| instance_info          | &#123;&#125;                                                                       |</div><div class="line">| instance_uuid          | None                                                                     |</div><div class="line">| last_error             | Error enabling the console on node c78f0257-bfbf-489c-b525-a39e0b924b79. |</div><div class="line">|                        | Reason: Console subprocess failed to start. Command: socat -T600         |</div><div class="line">|                        | -L/tmp/c78f0257-bfbf-489c-b525-a39e0b924b79.pid                          |</div><div class="line">|                        | TCP4-LISTEN:8901,bind=172.18.22.161,reuseaddr EXEC:"ipmitool -H          |</div><div class="line">|                        | 172.18.21.164 -I lanplus -U admin -f /tmp/c78f0257-bfbf-                 |</div><div class="line">|                        | 489c-b525-a39e0b924b79.pw -v sol activate",pty,stderr. Exit code: 1.     |</div><div class="line">|                        | Stderr: '2017/08/31 09:52:42 socat[39] E bind(11, &#123;AF=2                  |</div><div class="line">|                        | 172.18.22.161:8901&#125;, 16): Address already in use                         |</div><div class="line">|                        | '                                                                        |</div><div class="line">| maintenance            | False                                                                    |</div><div class="line">| maintenance_reason     | None                                                                     |</div><div class="line">| name                   | node1                                                                    |</div><div class="line">| network_interface      | flat                                                                     |</div><div class="line">| power_state            | None                                                                     |</div><div class="line">| properties             | &#123;u'memory_mb': 129024, u'cpu_arch': u'x86_64', u'local_gb': 120,         |</div><div class="line">|                        | u'cpus': 36&#125;                                                             |</div><div class="line">| provision_state        | enroll                                                                   |</div><div class="line">| provision_updated_at   | None                                                                     |</div><div class="line">| raid_config            | &#123;&#125;                                                                       |</div><div class="line">| reservation            | None                                                                     |</div><div class="line">| resource_class         |                                                                          |</div><div class="line">| target_power_state     | None                                                                     |</div><div class="line">| target_provision_state | None                                                                     |</div><div class="line">| target_raid_config     | &#123;&#125;                                                                       |</div><div class="line">| updated_at             | 2017-08-31T01:53:01+00:00                                                |</div><div class="line">| uuid                   | c78f0257-bfbf-489c-b525-a39e0b924b79                                     |</div><div class="line">+------------------------+--------------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<h5 id="修改状态将enroll改为available"><a href="#修改状态将enroll改为available" class="headerlink" title="修改状态将enroll改为available"></a>修改状态将enroll改为available</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# ironic --ironic-api-version 1.20 node-set-provision-state $NODE_UUID manage</div><div class="line">[root@control01 ~]# ironic node-list</div><div class="line">+--------------------------------------+-------+---------------+-------------+--------------------+-------------+</div><div class="line">| UUID                                 | Name  | Instance UUID | Power State | Provisioning State | Maintenance |</div><div class="line">+--------------------------------------+-------+---------------+-------------+--------------------+-------------+</div><div class="line">| c78f0257-bfbf-489c-b525-a39e0b924b79 | node1 | None          | power off   | manageable         | False       |</div><div class="line">+--------------------------------------+-------+---------------+-------------+--------------------+-------------+</div><div class="line">[root@control01 ~]# ironic --ironic-api-version 1.20 node-set-provision-state $NODE_UUID provide</div><div class="line">[root@control01 ~]# ironic node-list</div><div class="line">+--------------------------------------+-------+---------------+-------------+--------------------+-------------+</div><div class="line">| UUID                                 | Name  | Instance UUID | Power State | Provisioning State | Maintenance |</div><div class="line">+--------------------------------------+-------+---------------+-------------+--------------------+-------------+</div><div class="line">| c78f0257-bfbf-489c-b525-a39e0b924b79 | node1 | None          | power off   | available          | False       |</div><div class="line">+--------------------------------------+-------+---------------+-------------+--------------------+-------------+</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# ironic node-show c78f0257-bfbf-489c-b525-a39e0b924b79</div><div class="line">+------------------------+-----------------------------------------------------------------------+</div><div class="line">| Property               | Value                                                                 |</div><div class="line">+------------------------+-----------------------------------------------------------------------+</div><div class="line">| chassis_uuid           | None                                                                  |</div><div class="line">| clean_step             | &#123;&#125;                                                                    |</div><div class="line">| console_enabled        | False                                                                 |</div><div class="line">| created_at             | 2017-08-31T01:50:09+00:00                                             |</div><div class="line">| driver                 | pxe_ipmitool_socat                                                    |</div><div class="line">| driver_info            | &#123;u'ipmi_terminal_port': 8901, u'ipmi_username': u'admin',             |</div><div class="line">|                        | u'deploy_kernel': u'99a5c143-e231-4018-a6bf-121585eb6290',            |</div><div class="line">|                        | u'ipmi_address': u'172.18.21.164', u'deploy_ramdisk':                 |</div><div class="line">|                        | u'8c23e3e4-e749-4a91-9af7-63674b5f5128', u'ipmi_password': u'******'&#125; |</div><div class="line">| driver_internal_info   | &#123;&#125;                                                                    |</div><div class="line">| extra                  | &#123;&#125;                                                                    |</div><div class="line">| inspection_finished_at | None                                                                  |</div><div class="line">| inspection_started_at  | None                                                                  |</div><div class="line">| instance_info          | &#123;&#125;                                                                    |</div><div class="line">| instance_uuid          | None                                                                  |</div><div class="line">| last_error             | None                                                                  |</div><div class="line">| maintenance            | False                                                                 |</div><div class="line">| maintenance_reason     | None                                                                  |</div><div class="line">| name                   | node1                                                                 |</div><div class="line">| network_interface      | flat                                                                  |</div><div class="line">| power_state            | power off                                                             |</div><div class="line">| properties             | &#123;u'memory_mb': 129024, u'cpu_arch': u'x86_64', u'local_gb': 120,      |</div><div class="line">|                        | u'cpus': 36&#125;                                                          |</div><div class="line">| provision_state        | available                                                             |</div><div class="line">| provision_updated_at   | 2017-08-31T01:56:55+00:00                                             |</div><div class="line">| raid_config            | &#123;&#125;                                                                    |</div><div class="line">| reservation            | None                                                                  |</div><div class="line">| resource_class         |                                                                       |</div><div class="line">| target_power_state     | None                                                                  |</div><div class="line">| target_provision_state | None                                                                  |</div><div class="line">| target_raid_config     | &#123;&#125;                                                                    |</div><div class="line">| updated_at             | 2017-08-31T01:56:55+00:00                                             |</div><div class="line">| uuid                   | c78f0257-bfbf-489c-b525-a39e0b924b79                                  |</div><div class="line">+------------------------+-----------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<h5 id="检查nova-hypervisor"><a href="#检查nova-hypervisor" class="headerlink" title="检查nova hypervisor"></a>检查nova hypervisor</h5><p>ironic node 添加完成后会新增一个nova hypervisor，通过nova hypervisor-show 可以看到裸机的vcpu,memory,disk 等配置信息。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# nova hypervisor-list</div><div class="line">+----+--------------------------------------+-------+---------+</div><div class="line">| ID | Hypervisor hostname                  | State | Status  |</div><div class="line">+----+--------------------------------------+-------+---------+</div><div class="line">| 4  | control02                            | up    | enabled |</div><div class="line">| 7  | control01                            | up    | enabled |</div><div class="line">| 10 | control03                            | up    | enabled |</div><div class="line">| 58 | c78f0257-bfbf-489c-b525-a39e0b924b79 | up    | enabled |</div><div class="line">+----+--------------------------------------+-------+---------+</div><div class="line">[root@control01 ~]# nova hypervisor-show 58</div><div class="line">+-------------------------+--------------------------------------+</div><div class="line">| Property                | Value                                |</div><div class="line">+-------------------------+--------------------------------------+</div><div class="line">| cpu_info                | &#123;&#125;                                   |</div><div class="line">| current_workload        | 0                                    |</div><div class="line">| disk_available_least    | 120                                  |</div><div class="line">| free_disk_gb            | 120                                  |</div><div class="line">| free_ram_mb             | 129024                               |</div><div class="line">| host_ip                 | 172.18.22.162                        |</div><div class="line">| hypervisor_hostname     | c78f0257-bfbf-489c-b525-a39e0b924b79 |</div><div class="line">| hypervisor_type         | ironic                               |</div><div class="line">| hypervisor_version      | 1                                    |</div><div class="line">| id                      | 58                                   |</div><div class="line">| local_gb                | 120                                  |</div><div class="line">| local_gb_used           | 0                                    |</div><div class="line">| memory_mb               | 129024                               |</div><div class="line">| memory_mb_used          | 0                                    |</div><div class="line">| running_vms             | 0                                    |</div><div class="line">| service_disabled_reason | None                                 |</div><div class="line">| service_host            | control01-ironic                     |</div><div class="line">| service_id              | 103                                  |</div><div class="line">| state                   | up                                   |</div><div class="line">| status                  | enabled                              |</div><div class="line">| vcpus                   | 36                                   |</div><div class="line">| vcpus_used              | 0                                    |</div><div class="line">+-------------------------+--------------------------------------+</div></pre></td></tr></table></figure></p>
<h3 id="创建裸机"><a href="#创建裸机" class="headerlink" title="创建裸机"></a>创建裸机</h3><p>由于目前horizon ironic 部分功能尚未完成，这里先以命令行形式创建虚拟机。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# openstack server create --image 442f0935-33cc-450b-b641-9f438fdcb7ea --flavor 2327b74a-88b4-49f6-a0cd-9a06c13c801a --key-name mykey \</div><div class="line"><span class="meta">&gt;</span><span class="bash">     --nic net-id=f157770d<span class="_">-e</span>81c-41a3-acf1-8<span class="built_in">fc</span>3f4ea7f31 \</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">     --availability-zone nova:control01-ironic <span class="built_in">test</span></span></div><div class="line">+-------------------------------------+------------------------------------------------+</div><div class="line">| Field                               | Value                                          |</div><div class="line">+-------------------------------------+------------------------------------------------+</div><div class="line">| OS-DCF:diskConfig                   | MANUAL                                         |</div><div class="line">| OS-EXT-AZ:availability_zone         | nova                                           |</div><div class="line">| OS-EXT-SRV-ATTR:host                | None                                           |</div><div class="line">| OS-EXT-SRV-ATTR:hypervisor_hostname | None                                           |</div><div class="line">| OS-EXT-SRV-ATTR:instance_name       |                                                |</div><div class="line">| OS-EXT-STS:power_state              | NOSTATE                                        |</div><div class="line">| OS-EXT-STS:task_state               | scheduling                                     |</div><div class="line">| OS-EXT-STS:vm_state                 | building                                       |</div><div class="line">| OS-SRV-USG:launched_at              | None                                           |</div><div class="line">| OS-SRV-USG:terminated_at            | None                                           |</div><div class="line">| accessIPv4                          |                                                |</div><div class="line">| accessIPv6                          |                                                |</div><div class="line">| addresses                           |                                                |</div><div class="line">| adminPass                           | YQS2x3r3AyYJ                                   |</div><div class="line">| config_drive                        |                                                |</div><div class="line">| created                             | 2017-08-31T02:01:31Z                           |</div><div class="line">| flavor                              | ironic (2327b74a-88b4-49f6-a0cd-9a06c13c801a)  |</div><div class="line">| hostId                              |                                                |</div><div class="line">| id                                  | 54142f88-8170-4081-a2c0-b8da831a7dd1           |</div><div class="line">| image                               | centos7 (442f0935-33cc-450b-b641-9f438fdcb7ea) |</div><div class="line">| key_name                            | mykey                                          |</div><div class="line">| name                                | test                                           |</div><div class="line">| progress                            | 0                                              |</div><div class="line">| project_id                          | 1345d1d9ddf34ee887fd1c17a4bb02b6               |</div><div class="line">| properties                          |                                                |</div><div class="line">| security_groups                     | name='default'                                 |</div><div class="line">| status                              | BUILD                                          |</div><div class="line">| updated                             | 2017-08-31T02:01:31Z                           |</div><div class="line">| user_id                             | 4b19a4a2173543888ba8460d54d5eebd               |</div><div class="line">| volumes_attached                    |                                                |</div><div class="line">+-------------------------------------+------------------------------------------------+</div></pre></td></tr></table></figure></p>
<h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@control01 ~]# nova list</div><div class="line">+--------------------------------------+----------------------------------------------+--------+------------+-------------+------------------------------+</div><div class="line">| ID                                   | Name                                         | Status | Task State | Power State | Networks                     |</div><div class="line">+--------------------------------------+----------------------------------------------+--------+------------+-------------+------------------------------+</div><div class="line">| 7648bfcf-a2c5-4028-b080-5ab62b218c9a | hadoop-cluster-new-vanilla-default-master1-0 | ACTIVE | -          | Running     | net1=10.10.0.7, 172.18.23.17 |</div><div class="line">| 970c02d3-0d7f-4e83-9866-be0ed25223a2 | hadoop-cluster-new-vanilla-default-worker1-0 | ACTIVE | -          | Running     | net1=10.10.0.10, 172.18.23.8 |</div><div class="line">| e057db81-eeed-40a4-b36c-ecdad7ade378 | hadoop-cluster-new-vanilla-default-worker1-1 | ACTIVE | -          | Running     | net1=10.10.0.6, 172.18.23.28 |</div><div class="line">| b36c5ee6-3b97-4e03-a0ef-f08e1866c0c8 | hadoop-cluster-new-vanilla-default-worker1-2 | ACTIVE | -          | Running     | net1=10.10.0.5               |</div><div class="line">| 54142f88-8170-4081-a2c0-b8da831a7dd1 | test                                         | ACTIVE | -          | Running     | network=172.18.23.11         |</div><div class="line">+--------------------------------------+----------------------------------------------+--------+------------+-------------+------------------------------+</div><div class="line">[root@control01 ~]# ping 172.18.23.11</div><div class="line">PING 172.18.23.11 (172.18.23.11) 56(84) bytes of data.</div><div class="line">64 bytes from 172.18.23.11: icmp_seq=22 ttl=63 time=3.23 ms</div><div class="line">64 bytes from 172.18.23.11: icmp_seq=23 ttl=63 time=0.217 ms</div><div class="line">64 bytes from 172.18.23.11: icmp_seq=24 ttl=63 time=0.223 ms</div><div class="line">64 bytes from 172.18.23.11: icmp_seq=25 ttl=63 time=0.124 ms</div><div class="line">64 bytes from 172.18.23.11: icmp_seq=26 ttl=63 time=0.189 ms</div><div class="line">64 bytes from 172.18.23.11: icmp_seq=27 ttl=63 time=0.195 ms</div><div class="line">64 bytes from 172.18.23.11: icmp_seq=28 ttl=63 time=0.186 ms</div><div class="line">64 bytes from 172.18.23.11: icmp_seq=29 ttl=63 time=0.229 ms</div><div class="line">^C</div><div class="line">--- 172.18.23.11 ping statistics ---</div><div class="line">29 packets transmitted, 8 received, 72% packet loss, time 27999ms</div><div class="line">rtt min/avg/max/mdev = 0.124/0.575/3.239/1.007 ms</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kolla </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中类的定义与使用]]></title>
      <url>/posts/python-class.html</url>
      <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>　　1.类的定义</p>
<p>　　2.父类，子类定义，以及子类调用父类</p>
<p>　　3.类的组合使用</p>
<p>　　4.内置功能<br><a id="more"></a></p>
<hr>
<h3 id="1-类的定义"><a href="#1-类的定义" class="headerlink" title="1.类的定义"></a>1.类的定义</h3><p>代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hotel</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""docstring for Hotel"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, room, cf=<span class="number">1.0</span>, br=<span class="number">15</span>)</span>:</span></div><div class="line">        self.room = room</div><div class="line">        self.cf = cf</div><div class="line">        self.br = br</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cacl_all</span><span class="params">(self, days=<span class="number">1</span>)</span>:</span></div><div class="line">        <span class="keyword">return</span> (self.room * self.cf + self.br) * days</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    stdroom = Hotel(<span class="number">200</span>)</div><div class="line">    big_room = Hotel(<span class="number">230</span>, <span class="number">0.9</span>)</div><div class="line">    <span class="keyword">print</span> stdroom.cacl_all()</div><div class="line">    <span class="keyword">print</span> stdroom.cacl_all(<span class="number">2</span>)</div><div class="line">    <span class="keyword">print</span> big_room.cacl_all()</div><div class="line">    <span class="keyword">print</span> big_room.cacl_all(<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="2-父类、子类以及调用父类"><a href="#2-父类、子类以及调用父类" class="headerlink" title="2.父类、子类以及调用父类"></a>2.父类、子类以及调用父类</h3><p>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># 父类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddBook</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, phone)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.phone = phone</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_phone</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.phone</div><div class="line"></div><div class="line"><span class="comment"># 子类，继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmplEmail</span><span class="params">(AddBook)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nm, ph, email)</span>:</span></div><div class="line">        <span class="comment"># AddBook.__init__(self, nm, ph) # 调用父类方法一</span></div><div class="line">        super(EmplEmail, self).__init__(nm, ph) <span class="comment"># 调用父类方法二</span></div><div class="line">        self.email = email</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_email</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.email</div><div class="line"></div><div class="line"><span class="comment"># 调用</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    Detian = AddBook(<span class="string">'handetian'</span>, <span class="string">'18210413001'</span>)</div><div class="line">    Meng = AddBook(<span class="string">'shaomeng'</span>, <span class="string">'18210413002'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">print</span> Detian.get_phone()</div><div class="line">    <span class="keyword">print</span> AddBook.get_phone(Meng)</div><div class="line"></div><div class="line">    alice = EmplEmail(<span class="string">'alice'</span>, <span class="string">'18210418888'</span>, <span class="string">'alice@xkops.com'</span>)</div><div class="line">    <span class="keyword">print</span> alice.get_email(), alice.get_phone()</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="3-类的组合使用"><a href="#3-类的组合使用" class="headerlink" title="3.类的组合使用"></a>3.类的组合使用</h3><p>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">1.class类的组合使用</div><div class="line">2.手机、邮箱、QQ等是可以变化的（定义在一起），姓名不可变（单独定义）。</div><div class="line">3.在另一个类中引用</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, phone, email, qq)</span>:</span></div><div class="line">        self.phone = phone</div><div class="line">        self.email = email</div><div class="line">        self.qq = qq</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_phone</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.phone</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_phone</span><span class="params">(self, newphone)</span>:</span></div><div class="line">        self.phone = newphone</div><div class="line">        <span class="keyword">print</span> <span class="string">"手机号更改已更改"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_email</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.email</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddrBook</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">'''docstring for AddBook'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, phone, email, qq)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.info = Info(phone, email, qq)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    Detian = AddrBook(<span class="string">'handetian'</span>, <span class="string">'18210413001'</span>, <span class="string">'detian@xkops.com'</span>, <span class="string">'123456'</span>)</div><div class="line">    <span class="keyword">print</span> Detian.info.get_phone()</div><div class="line">    Detian.info.update_phone(<span class="number">18210413002</span>)</div><div class="line">    <span class="keyword">print</span> Detian.info.get_phone()</div><div class="line">    <span class="keyword">print</span> Detian.info.get_email()</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="4-内置功能-函数（）加与不加的区别）"><a href="#4-内置功能-函数（）加与不加的区别）" class="headerlink" title="4.内置功能(函数（）加与不加的区别）"></a>4.内置功能(函数（）加与不加的区别）</h3><p>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, author)</span>:</span></div><div class="line">        self.title = title</div><div class="line">        self.author = author</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.title</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.title</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"%s is written by %s"</span> %(self.title, self.author)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pybook = Books(<span class="string">'Core Python'</span>, <span class="string">'Wesley'</span>)</div><div class="line">    <span class="keyword">print</span> pybook</div><div class="line">    pybook()</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, author)</span>:</span></div><div class="line">        self.title = title</div><div class="line">        self.author = author</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.title</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.title</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"%s is written by %s"</span> %(self.title, self.author)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pybook = Books(<span class="string">'Core Python'</span>, <span class="string">'Wesley'</span>)</div><div class="line">    <span class="keyword">print</span> pybook</div><div class="line">    pybook()</div><div class="line">复制代码</div><div class="line">复制代码</div><div class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------</div><div class="line"></div><div class="line">复制代码</div><div class="line">复制代码</div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Number</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""Custum object</span></div><div class="line">    add/radd -&gt; +; </div><div class="line">    sub/rsub -&gt; -;</div><div class="line">    mul/rmul -&gt; *;</div><div class="line">    div/rdiv -&gt; /;</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number)</span>:</span></div><div class="line">        self.number = number</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.number + other        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.number  + other</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.number - other</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rsub__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other - self.number</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.number &gt; other:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    num = Number(<span class="number">10</span>)</div><div class="line">    <span class="keyword">print</span> num + <span class="number">20</span></div><div class="line">    <span class="keyword">print</span> <span class="number">30</span> + num</div><div class="line">    <span class="keyword">print</span> num - <span class="number">5</span></div><div class="line">    <span class="keyword">print</span> <span class="number">11</span> - num</div><div class="line">    <span class="keyword">print</span> num &gt; <span class="number">20</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 类 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS 7.3 安装Ceph Jewel 10.2.9]]></title>
      <url>/posts/intsall-ceph.html</url>
      <content type="html"><![CDATA[<h3 id="基于CentOS-7-3-安装Ceph-Jewel-10-2-9"><a href="#基于CentOS-7-3-安装Ceph-Jewel-10-2-9" class="headerlink" title="基于CentOS 7.3 安装Ceph Jewel 10.2.9"></a>基于<code>CentOS 7.3</code> 安装<code>Ceph Jewel 10.2.9</code></h3><a id="more"></a>
<h3 id="网络架构图"><a href="#网络架构图" class="headerlink" title="网络架构图"></a>网络架构图</h3><p><img src="https://ljw.howieli.cn/blog/2017-7-18/ceph-top.png" alt=""></p>
<h3 id="节点信息配置"><a href="#节点信息配置" class="headerlink" title="节点信息配置"></a>节点信息配置</h3><p><img src="https://ljw.howieli.cn/blog/2017-7-18/ceph-lab-configure.png" alt=""></p>
<h3 id="配置说明："><a href="#配置说明：" class="headerlink" title="配置说明："></a>配置说明：</h3><blockquote>
<p>采用了4台centos7.3系统的虚拟机，1台Ceph-Master作为安装节点，NTP Server；3台Ceph节点，既作为OSD节点，也作为Monitor节点。每个OSD节点有6个盘：300G的系统盘，3个2TB作为SATA池的OSD，800GB作为SSD池的OSD，240GB SSD盘作为日志盘。</p>
</blockquote>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>这里安装centos7.3的操作系统我就不多说了，下面我说一下环境准备工作。</p>
<p>1.检查操作系统的版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> cat /etc/redhat-release</span></div><div class="line">CentOS Linux release 7.3.1611 (Core)</div></pre></td></tr></table></figure></p>
<p>2.查看系统内核版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> uname -r</span></div><div class="line">3.10.0-514.26.2.el7.x86_64</div></pre></td></tr></table></figure></p>
<p>3.关闭防火墙和<code>selinux</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sed -i 's/SELINUX=.*/SELINUX=disabled/' /etc/selinux/config</div><div class="line">setenforce 0</div><div class="line">systemctl stop firewalld</div><div class="line">systemctl disable firewalld</div></pre></td></tr></table></figure></p>
<p>4.查看设备信息（所有的<code>OSD</code>节点）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsblk</span></div><div class="line">NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</div><div class="line">sda           8:0    0  300G  0 disk </div><div class="line">├─sda1        8:1    0    1G  0 part /boot</div><div class="line">└─sda2        8:2    0  299G  0 part </div><div class="line">  ├─cl-root 253:0    0   50G  0 lvm  /</div><div class="line">  ├─cl-swap 253:1    0    2G  0 lvm  [SWAP]</div><div class="line">  └─cl-home 253:2    0  247G  0 lvm  /home</div><div class="line">sdb           8:16   0    2T  0 disk </div><div class="line">sdc           8:32   0    2T  0 disk </div><div class="line">sdd           8:48   0    2T  0 disk </div><div class="line">sde           8:64   0  800G  0 disk </div><div class="line">sdf           8:80   0  240G  0 disk </div><div class="line">sr0          11:0    1 1024M  0 rom</div></pre></td></tr></table></figure></p>
<p>5.查看网卡配置（所有<code>OSD</code>节点）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ip a</span></div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    inet 127.0.0.1/8 scope host lo</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</div><div class="line">    link/ether 00:0c:29:06:c8:a4 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 172.16.0.11/24 brd 172.16.0.255 scope global eth0</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</div><div class="line">    link/ether 00:0c:29:06:c8:ae brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 192.168.0.11/24 brd 192.168.0.255 scope global eth1</div><div class="line">       valid_lft forever preferred_lft forever</div></pre></td></tr></table></figure></p>
<p>6.在所有节点配置<code>hosts</code>解析<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">172.16.0.10 ceph-master</div><div class="line">172.16.0.11 ceph-node-1</div><div class="line">172.16.0.12 ceph-node-2</div><div class="line">172.16.0.13 ceph-node-3</div></pre></td></tr></table></figure></p>
<p>7.安装基础的软件包(所有节点)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install tree nmap sysstat lrzsz dos2unix wegt git net-tools -y</div></pre></td></tr></table></figure></p>
<p>8.建立<code>SSH</code>通信（在<code>ceph-master</code>节点上执行）<br>（1）生成秘钥文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure></p>
<p>（2）拷贝秘钥文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id root@ceph-master</div><div class="line">ssh-copy-id root@ceph-node-1</div><div class="line">ssh-copy-id root@ceph-node-2</div><div class="line">ssh-copy-id root@ceph-node-3</div></pre></td></tr></table></figure></p>
<p>环境准备基本完成</p>
<h3 id="配置NTP服务"><a href="#配置NTP服务" class="headerlink" title="配置NTP服务"></a>配置<code>NTP</code>服务</h3><p>首先我们要在所有的节点上安装<code>NTP</code>服务<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum install -y ntp</span></div></pre></td></tr></table></figure></p>
<h4 id="在ceph-master节点上配置"><a href="#在ceph-master节点上配置" class="headerlink" title="在ceph-master节点上配置"></a>在<code>ceph-master</code>节点上配置</h4><p>1.修改<code>NTP</code>配置文件<code>/etc/ntp.conf</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vim /etc/ntp.conf</span></div><div class="line"><span class="meta">#</span><span class="bash">server 0.centos.pool.ntp.org iburst</span></div><div class="line"><span class="meta">#</span><span class="bash">server 1.centos.pool.ntp.org iburst</span></div><div class="line"><span class="meta">#</span><span class="bash">server 2.centos.pool.ntp.org iburst</span></div><div class="line"><span class="meta">#</span><span class="bash">server 3.centos.pool.ntp.org iburst</span></div><div class="line">restrict 172.16.0.0 mask 255.255.255.0 nomodify notrap</div><div class="line">server 127.127.1.0 minpoll 4</div><div class="line">fudge 127.127.1.0 stratum 0</div></pre></td></tr></table></figure></p>
<p>2.修改配置文件<code>/etc/ntp/step-tickers</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vim /etc/ntp/step-tickers</span></div><div class="line"><span class="meta">#</span><span class="bash">0.centos.pool.ntp.org</span></div><div class="line">127.127.1.0</div></pre></td></tr></table></figure></p>
<p>3.启动<code>NTP</code>服务，并设置开机启动<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable ntpd ; systemctl start ntpd</div></pre></td></tr></table></figure></p>
<h4 id="在所有的OSD节点配置"><a href="#在所有的OSD节点配置" class="headerlink" title="在所有的OSD节点配置"></a>在所有的<code>OSD</code>节点配置</h4><p>1.修改NTP配置文件<code>/etc/ntp.conf</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vim /etc/ntp.conf</span></div><div class="line"><span class="meta">#</span><span class="bash">server 0.centos.pool.ntp.org iburst</span></div><div class="line"><span class="meta">#</span><span class="bash">server 1.centos.pool.ntp.org iburst</span></div><div class="line"><span class="meta">#</span><span class="bash">server 2.centos.pool.ntp.org iburst</span></div><div class="line"><span class="meta">#</span><span class="bash">server 3.centos.pool.ntp.org iburst</span></div><div class="line">server 172.16.0.10</div></pre></td></tr></table></figure></p>
<p>2.启动<code>NTP</code>服务，并设置开机启动<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable ntpd ; systemctl start ntpd</div></pre></td></tr></table></figure></p>
<h4 id="验证NTP"><a href="#验证NTP" class="headerlink" title="验证NTP"></a>验证<code>NTP</code></h4><p>在所有节点执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ntpq -p</span></div><div class="line"></div><div class="line">     remote           refid      st t when poll reach   delay   offset  jitter</div><div class="line">==============================================================================</div><div class="line">*ceph-master     .LOCL.           1 u   16   64  377    0.269    0.032   0.269</div></pre></td></tr></table></figure></p>
<p>前面有 * 表示已经同步。</p>
<h3 id="安装ceph"><a href="#安装ceph" class="headerlink" title="安装ceph"></a>安装<code>ceph</code></h3><p>####跟新系统源(所有节点执行)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rm -rf /etc/yum.repos.d/*.repo</div><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</div><div class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</div><div class="line">sed -i '/aliyuncs/d' /etc/yum.repos.d/CentOS-Base.repo</div><div class="line">sed -i 's/$releasever/7/g' /etc/yum.repos.d/CentOS-Base.repo</div><div class="line">sed -i '/aliyuncs/d' /etc/yum.repos.d/epel.repo</div><div class="line">yum clean all</div><div class="line">yum makecache fast</div></pre></td></tr></table></figure></p>
<h4 id="安装ceph-deploy"><a href="#安装ceph-deploy" class="headerlink" title="安装ceph-deploy"></a>安装<code>ceph-deploy</code></h4><p>以下在<code>ceph-master</code>节点上执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum install http://mirrors.163.com/ceph/rpm-jewel/el7/noarch/ceph-deploy-1.5.38-0.noarch.rpm</span></div></pre></td></tr></table></figure></p>
<h4 id="查看ceph-deploy版本"><a href="#查看ceph-deploy版本" class="headerlink" title="查看ceph-deploy版本"></a>查看<code>ceph-deploy</code>版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ceph-deploy --version</span></div><div class="line">1.5.38</div></pre></td></tr></table></figure>
<h4 id="创建ceph集群"><a href="#创建ceph集群" class="headerlink" title="创建ceph集群"></a>创建<code>ceph</code>集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph-deploy new ceph-node-1 ceph-node-2 ceph-node-3</div></pre></td></tr></table></figure>
<h4 id="编辑ceph配置文件"><a href="#编辑ceph配置文件" class="headerlink" title="编辑ceph配置文件"></a>编辑<code>ceph</code>配置文件</h4><p>在<code>global</code>下添加以下配置：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vim ceph.conf </span></div><div class="line">[global]</div><div class="line">mon_clock_drift_allowed = 5</div><div class="line">osd_journal_size = 20480</div><div class="line">public_network=172.16.0.0/24</div></pre></td></tr></table></figure></p>
<h4 id="安装Ceph"><a href="#安装Ceph" class="headerlink" title="安装Ceph"></a>安装<code>Ceph</code></h4><p>直接指定源地址，不用担心<code>ceph.com</code>官方源无法下载了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph-deploy install --release jewel --repo-url http://mirrors.163.com/ceph/rpm-jewel/el7 --gpg-url http://mirrors.163.com/ceph/keys/release.asc ceph-master ceph-node-1 ceph-node-2 ceph-node-3</div></pre></td></tr></table></figure></p>
<h4 id="检查ceph版本"><a href="#检查ceph版本" class="headerlink" title="检查ceph版本"></a>检查<code>ceph</code>版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ceph -v</div><div class="line">ceph version 10.2.9 (2ee413f77150c0f375ff6f10edd6c8f9c7d060d0)</div></pre></td></tr></table></figure>
<h4 id="初始化mom节点"><a href="#初始化mom节点" class="headerlink" title="初始化mom节点"></a>初始化<code>mom</code>节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph-deploy mon create-initial</div></pre></td></tr></table></figure>
<h4 id="查看集群状态（在OSD节点上查看）"><a href="#查看集群状态（在OSD节点上查看）" class="headerlink" title="查看集群状态（在OSD节点上查看）"></a>查看集群状态（在<code>OSD</code>节点上查看）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ceph <span class="_">-s</span></span></div><div class="line">    cluster 60597e53-ad29-44bd-8dcd-db6aeae6f580</div><div class="line">     health HEALTH_ERR</div><div class="line">            no osds</div><div class="line">     monmap e2: 3 mons at &#123;ceph-node-1=172.16.0.11:6789/0,ceph-node-2=172.16.0.12:6789/0,ceph-node-3=172.16.0.13:6789/0&#125;</div><div class="line">            election epoch 6, quorum 0,1,2 ceph-node-1,ceph-node-2,ceph-node-3</div><div class="line">     osdmap e1: 0 osds: 0 up, 0 in</div><div class="line">            flags sortbitwise,require_jewel_osds</div><div class="line">      pgmap v2: 64 pgs, 1 pools, 0 bytes data, 0 objects</div><div class="line">            0 kB used, 0 kB / 0 kB avail</div><div class="line">                  64 creating</div></pre></td></tr></table></figure>
<h3 id="配置管理节点ceph-master"><a href="#配置管理节点ceph-master" class="headerlink" title="配置管理节点ceph-master"></a>配置管理节点<code>ceph-master</code></h3><p>为什么每次查看<code>ceph –s</code>的只能在<code>OSD</code>节点上执行，而不能在<code>Master</code>节点上执行？<br>用<code>ceph-deploy</code>把配置文件和<code>admin</code>密钥拷贝到<code>Master</code>节点<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ceph-deploy admin ceph-master</span></div></pre></td></tr></table></figure></p>
<p>确保你对<code>ceph.client.admin.keyring</code>有正确的操作权限<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> chmod +r /etc/ceph/ceph.client.admin.keyring</span></div></pre></td></tr></table></figure></p>
<p>检查集群的健康状况<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ceph <span class="_">-s</span></span></div><div class="line">    cluster 60597e53-ad29-44bd-8dcd-db6aeae6f580</div><div class="line">     health HEALTH_ERR</div><div class="line">            no osds</div><div class="line">     monmap e2: 3 mons at &#123;ceph-node-1=172.16.0.11:6789/0,ceph-node-2=172.16.0.12:6789/0,ceph-node-3=172.16.0.13:6789/0&#125;</div><div class="line">            election epoch 6, quorum 0,1,2 ceph-node-1,ceph-node-2,ceph-node-3</div><div class="line">     osdmap e1: 0 osds: 0 up, 0 in</div><div class="line">            flags sortbitwise,require_jewel_osds</div><div class="line">      pgmap v2: 64 pgs, 1 pools, 0 bytes data, 0 objects</div><div class="line">            0 kB used, 0 kB / 0 kB avail</div><div class="line">                  64 creating</div></pre></td></tr></table></figure></p>
<h3 id="对OSD节点配置"><a href="#对OSD节点配置" class="headerlink" title="对OSD节点配置"></a>对<code>OSD</code>节点配置</h3><h4 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h4><p>将<code>240G</code>的<code>SSD</code>盘分出<code>4</code>个<code>20G</code>的分区用作 <code>journal</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> fdisk /dev/sdf</span></div><div class="line">Welcome to fdisk (util-linux 2.23.2).</div><div class="line">Changes will remain in memory only, until you decide to write them.</div><div class="line">Be careful before using the write command.</div><div class="line">Device does not contain a recognized partition table</div><div class="line">Building a new DOS disklabel with disk identifier 0x9ec0a047.</div><div class="line">Command (m for help): g</div><div class="line">Building a new GPT disklabel (GUID: 31D328DD-E9A0-4306-9C99-8D42F7BA8008)</div><div class="line">Command (m for help): n</div><div class="line">Partition number (1-128, default 1): </div><div class="line">First sector (2048-503316446, default 2048): </div><div class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-503316446, default 503316446): +20G</div><div class="line">Created partition 1</div><div class="line">Command (m for help): n</div><div class="line">Partition number (2-128, default 2): </div><div class="line">First sector (41945088-503316446, default 41945088): </div><div class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (41945088-503316446, default 503316446): +20G</div><div class="line">Created partition 2</div><div class="line">Command (m for help): n</div><div class="line">Partition number (3-128, default 3): </div><div class="line">First sector (83888128-503316446, default 83888128): </div><div class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (83888128-503316446, default 503316446): +20G</div><div class="line">Created partition 3</div><div class="line">Command (m for help): n</div><div class="line">Partition number (4-128, default 4): </div><div class="line">First sector (125831168-503316446, default 125831168): </div><div class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (125831168-503316446, default 503316446): +20G</div><div class="line">Created partition 4</div><div class="line">Command (m for help): p</div><div class="line">Disk /dev/sdf: 257.7 GB, 257698037760 bytes, 503316480 sectors</div><div class="line">Units = sectors of 1 * 512 = 512 bytes</div><div class="line">Sector size (logical/physical): 512 bytes / 512 bytes</div><div class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</div><div class="line">Disk label type: gpt</div><div class="line"><span class="meta">#</span><span class="bash">         Start          End    Size  Type            Name</span></div><div class="line"> 1         2048     41945087     20G  Linux filesyste </div><div class="line"> 2     41945088     83888127     20G  Linux filesyste </div><div class="line"> 3     83888128    125831167     20G  Linux filesyste </div><div class="line"> 4    125831168    167774207     20G  Linux filesyste </div><div class="line">Command (m for help): w</div><div class="line">The partition table has been altered!</div><div class="line">Calling ioctl() to re-read partition table.</div><div class="line">Syncing disks.</div></pre></td></tr></table></figure></p>
<h4 id="查看分区"><a href="#查看分区" class="headerlink" title="查看分区"></a>查看分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsblk</span></div><div class="line">NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</div><div class="line">sda           8:0    0  300G  0 disk </div><div class="line">├─sda1        8:1    0    1G  0 part /boot</div><div class="line">└─sda2        8:2    0  299G  0 part </div><div class="line">  ├─cl-root 253:0    0   50G  0 lvm  /</div><div class="line">  ├─cl-swap 253:1    0    2G  0 lvm  [SWAP]</div><div class="line">  └─cl-home 253:2    0  247G  0 lvm  /home</div><div class="line">sdb           8:16   0    2T  0 disk </div><div class="line">sdc           8:32   0    2T  0 disk </div><div class="line">sdd           8:48   0    2T  0 disk </div><div class="line">sde           8:64   0  800G  0 disk </div><div class="line">sdf           8:80   0  240G  0 disk </div><div class="line">├─sdf1        8:81   0   20G  0 part </div><div class="line">├─sdf2        8:82   0   20G  0 part </div><div class="line">├─sdf3        8:83   0   20G  0 part </div><div class="line">└─sdf4        8:84   0   20G  0 part </div><div class="line">sr0          11:0    1 1024M  0 rom</div></pre></td></tr></table></figure>
<h4 id="修改-Journal-分区权限"><a href="#修改-Journal-分区权限" class="headerlink" title="修改 Journal 分区权限"></a>修改 <code>Journal</code> 分区权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown ceph:ceph /dev/sdf[1-4]</div></pre></td></tr></table></figure>
<h3 id="添加OSD"><a href="#添加OSD" class="headerlink" title="添加OSD"></a>添加<code>OSD</code></h3><p>在<code>ceph-master</code>执行<br>先部署<code>SATA</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph-deploy osd prepare ceph-node-1:/dev/sdb:/dev/sdf1 ceph-node-1:/dev/sdc:/dev/sdf2 ceph-node-1:/dev/sdd:/dev/sdf3 ceph-node-2:/dev/sdb:/dev/sdf1 ceph-node-2:/dev/sdc:/dev/sdf2 ceph-node-2:/dev/sdd:/dev/sdf3 ceph-node-3:/dev/sdb:/dev/sdf1 ceph-node-3:/dev/sdc:/dev/sdf2 ceph-node-3:/dev/sdd:/dev/sdf3</div></pre></td></tr></table></figure></p>
<p>再部署<code>SSD</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph-deploy osd prepare ceph-node-1:/dev/sde:/dev/sdf4 ceph-node-2:/dev/sde:/dev/sdf4 ceph-node-3:/dev/sde:/dev/sdf4</div></pre></td></tr></table></figure></p>
<p>先部署<code>SATA</code>，再部署<code>SSD</code>，这样序号就会连续了…<br>查看集群状态<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ceph <span class="_">-s</span></span></div><div class="line">    cluster f9dba93b-c40f-4b31-8e6d-6ea830cad944</div><div class="line">     health HEALTH_OK</div><div class="line">     monmap e1: 3 mons at &#123;ceph-node-1=172.16.0.11:6789/0,ceph-node-2=172.16.0.12:6789/0,ceph-node-3=172.16.0.13:6789/0&#125;</div><div class="line">            election epoch 6, quorum 0,1,2 ceph-node-1,ceph-node-2,ceph-node-3</div><div class="line">     osdmap e56: 12 osds: 12 up, 12 in</div><div class="line">            flags sortbitwise,require_jewel_osds</div><div class="line">      pgmap v142: 128 pgs, 1 pools, 0 bytes data, 0 objects</div><div class="line">            413 MB used, 20821 GB / 20821 GB avail</div><div class="line">                 128 active+clean</div></pre></td></tr></table></figure></p>
<p>查看<code>OSD</code>的分布<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ceph osd tree</span></div><div class="line">ID WEIGHT   TYPE NAME            UP/DOWN REWEIGHT PRIMARY-AFFINITY </div><div class="line">-1 20.33363 root default                                           </div><div class="line">-2  6.77788     host ceph-node-1                                   </div><div class="line"> 0  1.99899         osd.0             up  1.00000          1.00000 </div><div class="line"> 1  1.99899         osd.1             up  1.00000          1.00000 </div><div class="line"> 4  1.99899         osd.4             up  1.00000          1.00000 </div><div class="line"> 9  0.78090         osd.9             up  1.00000          1.00000 </div><div class="line">-3  6.77788     host ceph-node-2                                   </div><div class="line"> 2  1.99899         osd.2             up  1.00000          1.00000 </div><div class="line"> 3  1.99899         osd.3             up  1.00000          1.00000 </div><div class="line"> 5  1.99899         osd.5             up  1.00000          1.00000 </div><div class="line">10  0.78090         osd.10            up  1.00000          1.00000 </div><div class="line">-4  6.77788     host ceph-node-3                                   </div><div class="line"> 6  1.99899         osd.6             up  1.00000          1.00000 </div><div class="line"> 7  1.99899         osd.7             up  1.00000          1.00000 </div><div class="line"> 8  1.99899         osd.8             up  1.00000          1.00000 </div><div class="line">11  0.78090         osd.11            up  1.00000          1.00000</div></pre></td></tr></table></figure></p>
<h3 id="安装完毕"><a href="#安装完毕" class="headerlink" title="安装完毕"></a>安装完毕</h3><p><code>ceph</code>安装完毕</p>
]]></content>
      
        <categories>
            
            <category> ceph </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[openstack新建云主机流程介绍]]></title>
      <url>/posts/openstack-nova.html</url>
      <content type="html"><![CDATA[<h3 id="openstack新建云主机流程介绍"><a href="#openstack新建云主机流程介绍" class="headerlink" title="openstack新建云主机流程介绍"></a><code>openstack</code>新建云主机流程介绍</h3><a id="more"></a>
<p><code>openstack</code> 可以登录到你的<code>dashboard</code>上之后点击“项目-计算-实例-创建实例”按钮，然后选择一下相应的配置，只短短十几秒内就可以创建好一台云主机供我们使用了，然而这么牛逼的事情是怎么做到的呢？<br>新建一个云主机流程图<br><img src="https://ljw.howieli.cn/blog/2017-7-3/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt=""></p>
<p>上图我们可以看出要想新建一台完整的云主机至少需要29步。</p>
<h3 id="流程图分析"><a href="#流程图分析" class="headerlink" title="流程图分析"></a>流程图分析</h3><h4 id="流程-1"><a href="#流程-1" class="headerlink" title="流程-1"></a>流程-1</h4><p>首先我们访问<code>dashboard</code>之后，浏览器会显示一个登陆界面（如下图所示），<code>horizon</code>会让我们登陆用户名和密码，然后<code>horizon</code>会把用户名和密码交给<code>keystone</code>来确认我们的身份，<code>keystone</code>确认成功后，才会允许我们登陆进去。（在<code>openstack</code>里<code>keystone</code>就相当于<code>openstack</code>这些组件共同的老大哥）<br><img src="https://ljw.howieli.cn/blog/2017-7-3/%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" alt=""><br>在原来我一直以为这里登陆的时候只不过是一个简单的<code>django</code>框架使用<code>pymysql</code>直接查询数据库，而实际上这里的表单信息是提交到了<code>keystone</code>，然后通过<code>keystone</code>查询数据库进行验证的</p>
<h4 id="流程-2"><a href="#流程-2" class="headerlink" title="流程-2"></a>流程-2</h4><p><code>keystone</code>接受到<code>horizon</code>前端表单传过来的用户、密码信息以后，会去查询数据库来确认身份，确认了身份后会将一个<code>token</code>（就相当于办理了一个身份证~~~~）返回到该用户，让这个用户在进行操作的时候不在需要提供用户名和密码了，而是直接拿出<code>token</code>来。</p>
<h4 id="流程-3"><a href="#流程-3" class="headerlink" title="流程-3"></a>流程-3</h4><p><code>horizon</code>拿到<code>token</code>之后，实际上这里在<code>web</code>页面上的显示就是登陆成功了，接下来就是找到“项目-计算-实例-创建实例”按钮，点击创建实例，然后根据我们的需求填写云主机相关的配置信息。<br>填写完配置信息后，点击启动实例之后，<code>horizon</code>就会带着三个东西去找<code>nova-api</code>了。</p>
<ul>
<li>创建云主机的请求</li>
<li>云主机相关配置信息</li>
<li>刚刚<code>keystone</code>返回给的<code>token</code></li>
</ul>
<h4 id="流程-4"><a href="#流程-4" class="headerlink" title="流程-4"></a>流程-4</h4><p><code>nova-api</code>会拿着<code>horizon</code>给的<code>token</code>去找老大哥<code>keystone</code>验证去。</p>
<h4 id="流程-5"><a href="#流程-5" class="headerlink" title="流程-5"></a>流程-5</h4><p><code>keystone</code>看到<code>nova-api</code>拿来的<code>token</code>，查询一下数据库确认，然后告诉给<code>nova-api</code>，这兄弟信得过，可以照他的安排去做。</p>
<h4 id="流程-6"><a href="#流程-6" class="headerlink" title="流程-6"></a>流程-6</h4><p><code>nova-api</code>从大哥那回来，接收了<code>horizon</code>提供的两样东西，一是云主机配置信息，二是创建请求，这<code>nova-api</code>手底下也有一帮小兄弟，这帮人之间沟通可不太方便都得通过一块小黑板（<code>mq</code>消息队列），把自己的需求写在小黑板上，能做的了这事的人自然就去做了。但配置信息现在还不能写在小黑板上，得找到确定去干活的人之后才行啊，所以<code>nova-api</code>就把配置信息放到数据库里。</p>
<h4 id="流程-7"><a href="#流程-7" class="headerlink" title="流程-7"></a>流程-7</h4><p>数据库把配置信息收好之后，对<code>nova-api</code>说了声，我放好了。</p>
<h4 id="流程-8"><a href="#流程-8" class="headerlink" title="流程-8"></a>流程-8</h4><p>放好配置信息后<code>nova-api</code>就在小黑板上写“现在要创建一台云主机，配置信息我已经放到数据库了，然后让<code>nova-schedular</code>给安排。</p>
<h4 id="流程-9"><a href="#流程-9" class="headerlink" title="流程-9"></a>流程-9</h4><p><code>nova-schedular</code>他就像是<code>nova-api</code>的秘书，<code>nova-api</code>的有事都是通过它交代给其他人的，这一步就是他从小黑板上看到了<code>nova-api</code>的信息。</p>
<h4 id="流程-10"><a href="#流程-10" class="headerlink" title="流程-10"></a>流程-10</h4><p><code>nova-schedular</code>现在知道了要创建云主机，但它要看一看云主机都要什么配置，才好决定该把这事交给谁去做（这里是指多个<code>nova-compute</code>的情况，各个计算节点的资源使用情况都在<code>nova-schedular</code>这里），所以他让数据库把云主机配置信息发给他看看。</p>
<h4 id="流程-11"><a href="#流程-11" class="headerlink" title="流程-11"></a>流程-11</h4><p>数据库收到请求之后，把云主机配置信息发给<code>nova-schedular</code>。</p>
<h4 id="流程-12"><a href="#流程-12" class="headerlink" title="流程-12"></a>流程-12</h4><p><code>nova-schedular</code>拿到配置信息后，使用调度算法决定了要让<code>nova-compute</code>去干这个事，就在小黑板上写“<code>nova-compute</code>你给创建个云主机，配置都在数据库里了”。</p>
<h4 id="流程-13"><a href="#流程-13" class="headerlink" title="流程-13"></a>流程-13</h4><p><code>nova-compute</code>看到小黑板上的东西之后，本应该直接去数据库拿取配置信息，但因为<code>nova-compute</code>的特殊身份，<code>nova-compute</code>所在计算节点上全是云主机，万一有一台云主机被黑客入侵从而控制计算节点，直接拖库是很危险的。所以不能让<code>nova-compute</code>知道数据库在什么地方。</p>
<h4 id="流程-14"><a href="#流程-14" class="headerlink" title="流程-14"></a>流程-14</h4><p><code>nova-compute</code>没办法去数据库取东西难道就不工作了吗？那可不行啊，他不知道去哪取，但他哥们知道啊，于是他在小黑板上写“<code>nova-conductor</code>，你帮我去数据库取一下配置信息”。</p>
<h4 id="流程-15"><a href="#流程-15" class="headerlink" title="流程-15"></a>流程-15</h4><p><code>nova-conductor</code>从小黑板上看到了<code>nova-compute</code>的请求。</p>
<h4 id="流程-16"><a href="#流程-16" class="headerlink" title="流程-16"></a>流程-16</h4><p><code>nova-conductor</code>告诉数据库我要查看某某云主机的配置信息。</p>
<h4 id="流程-17"><a href="#流程-17" class="headerlink" title="流程-17"></a>流程-17</h4><p>数据库把云主机配置信息发送给<code>nova-conductor</code>。</p>
<h4 id="流程-18"><a href="#流程-18" class="headerlink" title="流程-18"></a>流程-18</h4><p><code>nova-conductor</code>把配置信息写在小黑板上。</p>
<h4 id="流程-19"><a href="#流程-19" class="headerlink" title="流程-19"></a>流程-19</h4><p><code>nova-compute</code>从小黑板上读取云主机的配置信息。</p>
<h4 id="流程-20"><a href="#流程-20" class="headerlink" title="流程-20"></a>流程-20</h4><p><code>nova-compute</code>拿到了云主机配置信息一看，人家可是专业的，立马就知道该怎么做了，先去找<code>glance-api</code>拿镜像吧，刚才讲了那么多，可都是在<code>nova</code>组件内部的，这次去找别的组件可不是写在小黑板上了，它得带着自己的身份证去，告诉<code>glance-api</code>，我要<code>xxx</code>镜像。</p>
<h4 id="流程-21"><a href="#流程-21" class="headerlink" title="流程-21"></a>流程-21</h4><p><code>glance-api</code>看<code>nova-compute</code>过来，他可不认识<code>nova-compute</code>，让<code>nova-compute</code>拿出身份证，拿着人家身份证找到自己的老大哥<code>keystone</code>看看这人靠不靠谱，<code>keystone</code>一看，没问题，按他说的做吧（在<code>nova</code>验证<code>horizon</code>被当做两步，这里化做一步，是为了简化重复的流程）。</p>
<h4 id="流程-22"><a href="#流程-22" class="headerlink" title="流程-22"></a>流程-22</h4><p><code>glance-api</code>把镜像资源信息返回给<code>nova-compute</code>（这里主要说创建云主机的过程，除<code>nova</code>外其他组件内部先不提）。</p>
<h4 id="流程-23"><a href="#流程-23" class="headerlink" title="流程-23"></a>流程-23</h4><p>接着<code>nova-compute</code>找到<code>neutron-server</code>（图里画错了，因为是偷别人的图，自己的图画了半天画不好。。。），告诉他我要<code>xxx</code>网络资源。</p>
<h4 id="流程-24"><a href="#流程-24" class="headerlink" title="流程-24"></a>流程-24</h4><p><code>neutron-server</code>也不认识他，拿着他的身份证找<code>keystone</code>确认了一下身份。</p>
<h4 id="流程-25"><a href="#流程-25" class="headerlink" title="流程-25"></a>流程-25</h4><p><code>nuetron-server</code>把网络资源信息返回给<code>nova-compute</code>。</p>
<h4 id="流程-26"><a href="#流程-26" class="headerlink" title="流程-26"></a>流程-26</h4><p><code>nova-compute</code>找到<code>cinder-api</code>要存储资源，云主机得有硬盘啊，得存东西啊（同样，这里图中也有错误）。</p>
<h4 id="流程-27"><a href="#流程-27" class="headerlink" title="流程-27"></a>流程-27</h4><p><code>cinder-api</code>也不认识他，拿着他的身份证找<code>keystone</code>确认了一下身份。</p>
<h4 id="流程-28"><a href="#流程-28" class="headerlink" title="流程-28"></a>流程-28</h4><p><code>cinder-api</code>把存储资源信息返回给<code>nova-compute</code>。</p>
<h4 id="流程-29"><a href="#流程-29" class="headerlink" title="流程-29"></a>流程-29</h4><p><code>nova-compute</code>拿到了所有资源之后，他其实也只是个收集信息的，他把工作全都交给了真正创建虚拟机的<code>Hypervisor</code>（<code>kvm</code>，<code>xen</code>等虚拟化技术）。</p>
<p>到此为止，你已经拥有了一台云主机了，流程看似复杂实际上在几十秒就完成了。</p>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[openstack镜像格式转换与上传]]></title>
      <url>/posts/openstack-image.html</url>
      <content type="html"><![CDATA[<h3 id="openstack镜像格式转换与上传"><a href="#openstack镜像格式转换与上传" class="headerlink" title="openstack镜像格式转换与上传"></a><code>openstack</code>镜像格式转换与上传</h3><a id="more"></a>
<h3 id="openstack常用镜像格式"><a href="#openstack常用镜像格式" class="headerlink" title="openstack常用镜像格式"></a><code>openstack</code>常用镜像格式</h3><p>今天我给大家介绍一下<code>openstack</code>常用的三种镜像格式，三种镜像格式分别是<code>qcow2</code>、<code>raw</code>、<code>vmdk</code>(所谓的<code>vmdk</code>就是<code>vmware</code>虚拟化的镜像格式，只有<code>openstack</code>纳管<code>vmware</code>才能用的到)。</p>
<h3 id="惊险格式的转换"><a href="#惊险格式的转换" class="headerlink" title="惊险格式的转换"></a>惊险格式的转换</h3><ul>
<li><p>将<code>raw</code>格式的镜像转化成<code>qcow2</code>格式（<code>image</code>代表镜像）</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> qemu-img convert <span class="_">-f</span> raw -O qcow2 image.img image.qcow2</span></div></pre></td></tr></table></figure>
</li>
<li><p>将<code>vmdk</code>格式的镜像转化成<code>raw</code>格式（<code>image</code>代表镜像）</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> qemu-img convert <span class="_">-f</span> vmdk -O raw image.vmdk image.img</span></div></pre></td></tr></table></figure>
</li>
<li><p>将<code>vmdk</code>格式的镜像转化成<code>qcow2</code>格式（<code>image</code>代表镜像）</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> qemu-img convert <span class="_">-f</span> vmdk -O qcow2 image.vmdk image.qcow2</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="获取镜像查看镜像信息"><a href="#获取镜像查看镜像信息" class="headerlink" title="获取镜像查看镜像信息"></a>获取镜像查看镜像信息</h3><p>查看镜像的详细信息<code>qemu-img info image.qcow2</code><br>例如<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> qemu-img info CentOS-7-x86_64-GenericCloud.qcow2c </span></div><div class="line">image: CentOS-7-x86_64-GenericCloud.qcow2c</div><div class="line">file format: qcow2                                #格式为qcow2</div><div class="line">virtual size: 8.0G (8589934592 bytes)             #空间大小</div><div class="line">disk size: 410M</div><div class="line">cluster_size: 65536</div></pre></td></tr></table></figure></p>
<h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><p>这里我只介绍在<code>linux</code>命令行上传三种格式的镜像</p>
<ul>
<li><p>上传<code>raw</code>格式的镜像</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">openstack image create --disk-format raw --container-format bare \</div><div class="line">--public image_raw --file ./image.raw</div></pre></td></tr></table></figure>
</li>
<li><p>上传<code>qcow2</code>格式的镜像</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glance image-create --name image_qcow2  --disk-format qcow2 --container-format bare &lt; image.qcow2</div></pre></td></tr></table></figure>
</li>
<li><p>上传<code>vmdk</code>格式的镜像</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">glance image-create --name image_vmdk --disk-format vmdk --container-format bare --property vmware_adaptertype=ide \</div><div class="line">--property hw_disk_bus=ide --property hypervisor_type=vmware &lt; image.vmdk</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用kolla快速搭建openstack-ocata单节点]]></title>
      <url>/posts/kolla-openstack-ocata.html</url>
      <content type="html"><![CDATA[<h3 id="利用kolla快速安装openstack-ocata单节点"><a href="#利用kolla快速安装openstack-ocata单节点" class="headerlink" title="利用kolla快速安装openstack-ocata单节点"></a>利用<code>kolla</code>快速安装<code>openstack-ocata</code>单节点</h3><a id="more"></a>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><p>我还是使用大家最常用的<code>vmware workstation 12.0</code>, <code>CentOS 7.3</code>虚拟机来完成整个的验证过程<br>在虚拟机安装<code>centos7.3</code>我就不再这里多说了,选择最小化安装即可。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> cat /etc/redhat-release </span></div><div class="line">CentOS Linux release 7.3.1611 (Core)</div></pre></td></tr></table></figure>
</li>
<li><p>kolla的安装，要求目标机器是两块网卡，所以我虚拟机也是分配两块网卡</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ip a|grep eno</span></div><div class="line">2: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</div><div class="line">    inet 192.168.18.131/24 brd 192.168.18.255 scope global dynamic eno16777736</div><div class="line">3: eno33554960: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master ovs-system state UP qlen 1000</div><div class="line">    inet 192.168.18.30/24 brd 192.168.18.255 scope global eno33554960</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>eno16777736</code>:设置的IP是：<code>192.168.18.131</code>，日后<code>Horizon</code>访问就是通过这个<code>IP</code>地址<br><code>eno33554960</code>:设置的IP是：<code>192.168.18.30</code>，这个是让<code>neutron</code>的<code>br-ex</code>绑定使用，虚拟机是通过这块网卡访问外网。</p>
<ul>
<li><p>修改主机名</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> hostname</span></div><div class="line">localhost.localdomain</div><div class="line"><span class="meta">#</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname kolla</span></div></pre></td></tr></table></figure>
</li>
<li><p>关闭<code>firewalld</code>和<code>iptables</code><br><code>centos7</code>以上系统默认防火墙是<code>firewalld</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl stop firewalld</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl status firewalld</span></div></pre></td></tr></table></figure>
</li>
<li><p>关闭<code>selinux</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> sed -i <span class="string">"s/SELINUX=enforcing/SELINUX=disabled/"</span> /etc/selinux/config</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看虚拟机是开启了虚拟</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> egrep <span class="string">"vmx|svm"</span> /proc/cpuinfo</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果没有开启虚拟化请开启虚拟化说</p>
<ul>
<li>重启系统<code>reboot</code>生效<h3 id="安装基础包"><a href="#安装基础包" class="headerlink" title="安装基础包"></a>安装基础包</h3></li>
<li><p>一定要先启用<code>EPEL</code>的<code>repo</code>源</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum install epel-release -y</span></div></pre></td></tr></table></figure>
</li>
<li><p>安装基础软件包</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum install vim net-tools tmux python-devel libffi-devel gcc openssl-devel git python-pip -y</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装<code>docker</code></h3><ul>
<li><p>设置<code>repo</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> tee /etc/yum.repos.d/docker.repo &lt;&lt; <span class="string">'EOF'</span></span></div><div class="line">[dockerrepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://yum.dockerproject.org/gpg</div><div class="line">EOF</div></pre></td></tr></table></figure>
</li>
<li><p>安装<code>Docker 1.12.5</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum install docker-engine-1.12.5 docker-engine-selinux-1.12.5 -y</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置<code>docker</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> mkdir /etc/systemd/system/docker.service.d</span></div><div class="line"><span class="meta">#</span><span class="bash"> tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; <span class="string">'EOF'</span></span></div><div class="line">[Service]</div><div class="line">MountFlags=shared</div><div class="line">EOF</div></pre></td></tr></table></figure>
</li>
<li><p>重启先关服务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> systemctl daemon-reload</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> docker</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl restart docker</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl status docker</span></div></pre></td></tr></table></figure>
</li>
<li><p>访问私有的<code>Docker</code>仓库<br>查看网卡的<code>ip</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ip a|grep eno16777736 |grep inet|awk <span class="string">'&#123;print $2&#125;'</span>|cut <span class="_">-d</span>/ <span class="_">-f</span>1</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>编辑<code>/usr/lib/systemd/system/docker.service</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ExecStart=/usr/bin/dockerd</span></div><div class="line">ExecStart=/usr/bin/dockerd --insecure-registry 192.168.18.131:4000</div></pre></td></tr></table></figure></p>
<ul>
<li>重启服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> systemctl daemon-reload</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl restart docker</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装Ansible"><a href="#安装Ansible" class="headerlink" title="安装Ansible"></a>安装<code>Ansible</code></h3><p><code>Kolla</code>项目的<code>Mitaka</code>版本要求<code>ansible</code>版本低于<code>2.0</code>，<code>Newton</code>版本以后的就只支持<code>2.x</code>以上的版本。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum -y install ansible</span></div></pre></td></tr></table></figure></p>
<h3 id="搭建Registry服务器"><a href="#搭建Registry服务器" class="headerlink" title="搭建Registry服务器"></a>搭建<code>Registry</code>服务器</h3><p>默认<code>docker</code>的<code>registry</code>是使用<code>5000</code>端口，对于<code>OpenStack</code>来说，有端口冲突，所以我将端口改成了<code>4000</code>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> docker run <span class="_">-d</span> -v /opt/registry:/var/lib/registry -p 4000:5000 \</span></div><div class="line">--restart=always --name registry registry:2</div></pre></td></tr></table></figure></p>
<h3 id="下载kolla官方提供的ocata镜像"><a href="#下载kolla官方提供的ocata镜像" class="headerlink" title="下载kolla官方提供的ocata镜像"></a>下载<code>kolla</code>官方提供的<code>ocata</code>镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> wget http://tarballs.openstack.org/kolla/images/centos-source-registry-ocata.tar.gz</span></div><div class="line"><span class="meta">#</span><span class="bash"> du -sh centos-source-registry-ocata.tar.gz </span></div><div class="line">3.0G	centos-source-registry-ocata.tar.gz</div><div class="line"><span class="meta">#</span><span class="bash"> tar zxf centos-source-registry-ocata.tar.gz -C /opt/registry/</span></div></pre></td></tr></table></figure>
<p><code>centos-source-registry-ocata</code>大约有3G。</p>
<h3 id="kolla-ansible"><a href="#kolla-ansible" class="headerlink" title="kolla-ansible"></a><code>kolla-ansible</code></h3><ul>
<li><p>下载<code>kolla-ansible</code>的代码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> http://git.trystack.cn/openstack/kolla-ansible -b stable/ocata</span></div></pre></td></tr></table></figure>
</li>
<li><p>安装<code>kolla-ansible</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> kolla-ansible/</span></div><div class="line"><span class="meta">#</span><span class="bash"> pip install . -i https://pypi.tuna.tsinghua.edu.cn/simple</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果<code>pip</code>速度很慢，后面可以加上参数<code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code>，指定国内的<code>pip</code>源</p>
<ul>
<li><p>复制相关文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> cp -r etc/kolla /etc/kolla/</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>如果是在虚拟机里装<code>kolla</code>，希望可以启动再启动虚拟机，那么你需要把<code>virt_type=qemu</code>，默认是<code>kvm</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir -p /etc/kolla/config/nova</div><div class="line">cat &lt;&lt; EOF &gt; /etc/kolla/config/nova/nova-compute.conf</div><div class="line">[libvirt]</div><div class="line">virt_type=qemu</div><div class="line">cpu_mode = none</div><div class="line">EOF</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装kolla"><a href="#安装kolla" class="headerlink" title="安装kolla"></a>安装<code>kolla</code></h3><ul>
<li><p>生成密码文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> kolla-genpwd</span></div></pre></td></tr></table></figure>
</li>
<li><p>编辑 <code>/etc/kolla/passwords.yml</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vim /etc/kolla/passwords.yml</span></div><div class="line">keystone_admin_password: admin</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这是登录<code>Dashboard</code>，<code>admin</code>使用的密码，你可以根据自己需要进行修改</p>
<ul>
<li>编辑<code>/etc/kolla/globals.yml</code>文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vim /etc/kolla/globals.yml</span></div><div class="line">kolla_base_distro: "centos"</div><div class="line">kolla_install_type: "source"</div><div class="line">openstack_release: "4.0.3"</div><div class="line">kolla_internal_vip_address: "192.168.18.100"</div><div class="line">docker_registry: "192.168.18.131:4000"</div><div class="line">docker_namespace: "lokolla"</div><div class="line">network_interface: "eno16777736"</div><div class="line">neutron_external_interface: "eno33554960"</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果不知道<code>openstack_release</code>和<code>docker_namespace</code>请查看<br><code># cd /opt/registry/docker/registry/v2/repositories/lokolla/centos-source-keepalived/_manifests/tags/4.0.3/</code><br>就可以知道<code>openstack_release</code>为<code>4.0.3</code>和<code>docker_namespace</code>为<code>lokolla</code>了。</p>
<h3 id="验证部署"><a href="#验证部署" class="headerlink" title="验证部署"></a>验证部署</h3><ul>
<li><p>验证</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> kolla-ansible prechecks -i kolla-ansible/ansible/inventory/all-in-one</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>pull</code>镜像</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> kolla-ansible pull -i kolla-ansible/ansible/inventory/all-in-one</span></div></pre></td></tr></table></figure>
</li>
<li><p>部署</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> kolla-ansible deploy -i kolla-ansible/ansible/inventory/all-in-one</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>大约半个小时基本上就部署完成了</p>
<h3 id="验证部署-1"><a href="#验证部署-1" class="headerlink" title="验证部署"></a>验证部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> kolla-ansible post-deploy</span></div></pre></td></tr></table></figure>
<p>这样就创建 <code>/etc/kolla/admin-openrc.sh</code>文件</p>
<h3 id="安装安装OpenStack-client端"><a href="#安装安装OpenStack-client端" class="headerlink" title="安装安装OpenStack client端"></a>安装安装<code>OpenStack client</code>端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> pip install python-openstackclient</span></div></pre></td></tr></table></figure>
<h3 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h3><p><img src="https://ljw.howieli.cn/blog/2017-6-23/dashboard.jpg" alt=""><br>账号：<code>admin</code><br>密码：<code>admin</code></p>
<h3 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h3><ul>
<li><p>编辑 <code>/usr/share/kolla-ansible/init-runonce</code><br>网络需要根据实际情况修改,我都是用的<code>nat</code>模式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EXT_NET_CIDR='192.168.18.0/24'</div><div class="line">EXT_NET_RANGE='start=192.168.18.10,end=192.168.18.20'</div><div class="line">EXT_NET_GATEWAY='192.168.18.2'</div></pre></td></tr></table></figure>
</li>
<li><p>运行脚本创建</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source /etc/kolla/admin-openrc.sh</div><div class="line">bash /usr/share/kolla-ansible/init-runonce</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="最后进入dashboard创建虚拟机，绑定浮动ip"><a href="#最后进入dashboard创建虚拟机，绑定浮动ip" class="headerlink" title="最后进入dashboard创建虚拟机，绑定浮动ip"></a>最后进入<code>dashboard</code>创建虚拟机，绑定浮动<code>ip</code></h3><p>这里我就不多说了，进入<code>dashboard</code>创建与主机即可，网络选择<code>demo-net</code>网络，创建完成后标定浮动<code>ip</code>即可。</p>
<h3 id="检查虚拟网络"><a href="#检查虚拟网络" class="headerlink" title="检查虚拟网络"></a>检查虚拟网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> openstack server list</span></div><div class="line">+--------------------------------------+------+--------+----------------------------------+------------+</div><div class="line">| ID                                   | Name | Status | Networks                         | Image Name |</div><div class="line">+--------------------------------------+------+--------+----------------------------------+------------+</div><div class="line">| 0267025b-8193-42ee-8551-67b7625482ab | tets | ACTIVE | demo-net=10.0.0.6, 192.168.18.12 | cirros     |</div><div class="line">+--------------------------------------+------+--------+----------------------------------+------------+</div><div class="line"><span class="meta">#</span><span class="bash"> ping 192.168.18.12 -c 3</span></div><div class="line">PING 192.168.18.12 (192.168.18.12) 56(84) bytes of data.</div><div class="line">64 bytes from 192.168.18.12: icmp_seq=1 ttl=63 time=1.85 ms</div><div class="line">64 bytes from 192.168.18.12: icmp_seq=2 ttl=63 time=1.46 ms</div><div class="line">64 bytes from 192.168.18.12: icmp_seq=3 ttl=63 time=5.94 ms</div><div class="line">--- 192.168.18.12 ping statistics ---</div><div class="line">3 packets transmitted, 3 received, 0% packet loss, time 2005ms</div><div class="line">rtt min/avg/max/mdev = 1.466/3.087/5.942/2.025 ms</div></pre></td></tr></table></figure>
<h3 id="检查虚拟机是能能通外网"><a href="#检查虚拟机是能能通外网" class="headerlink" title="检查虚拟机是能能通外网"></a>检查虚拟机是能能通外网</h3><p><code>cirros</code>用户密码默认为<code>cubswin:)</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ssh cirros@192.168.18.12</span></div><div class="line">cirros@192.168.18.12's password: </div><div class="line"><span class="meta">$</span><span class="bash"> ip a</span></div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue </div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    inet 127.0.0.1/8 scope host lo</div><div class="line">    inet6 ::1/128 scope host </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc pfifo_fast qlen 1000</div><div class="line">    link/ether fa:16:3e:82:4e:f8 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 10.0.0.6/24 brd 10.0.0.255 scope global eth0</div><div class="line">    inet6 fe80::f816:3eff:fe82:4ef8/64 scope link </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="meta">$</span><span class="bash"> ping 8.8.8.8 -c 2</span></div><div class="line">PING 8.8.8.8 (8.8.8.8): 56 data bytes</div><div class="line">64 bytes from 8.8.8.8: seq=0 ttl=127 time=171.481 ms</div><div class="line">64 bytes from 8.8.8.8: seq=1 ttl=127 time=171.464 ms</div><div class="line">--- 8.8.8.8 ping statistics ---</div><div class="line">2 packets transmitted, 2 packets received, 0% packet loss</div><div class="line">round-trip min/avg/max = 171.464/171.472/171.481 ms</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DevStack]]></title>
      <url>/posts/Openstack-DevStack-ocata.html</url>
      <content type="html"><![CDATA[<h3 id="DevStack安装openstack"><a href="#DevStack安装openstack" class="headerlink" title="DevStack安装openstack"></a><code>DevStack</code>安装<code>openstack</code></h3><a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="关闭iptables防火墙或firewalld防火墙"><a href="#关闭iptables防火墙或firewalld防火墙" class="headerlink" title="关闭iptables防火墙或firewalld防火墙"></a>关闭<code>iptables</code>防火墙或<code>firewalld</code>防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> systemctl stop iptables</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">disable</span> iptables</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl stop firewalld</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld</span></div></pre></td></tr></table></figure>
<h4 id="关闭SElinux"><a href="#关闭SElinux" class="headerlink" title="关闭SElinux"></a>关闭<code>SElinux</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> sed -i <span class="string">'SELINUX=enforcing/SELINUX=disable/'</span> /etc/selinux/config</span></div><div class="line"><span class="meta">#</span><span class="bash"> reboot</span></div></pre></td></tr></table></figure>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装<code>git</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum -y install epel-release git</span></div></pre></td></tr></table></figure>
<h3 id="准备openstack环境"><a href="#准备openstack环境" class="headerlink" title="准备openstack环境"></a>准备<code>openstack</code>环境</h3><p>下载代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /home</span></div><div class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/openstack-dev/devstack -b stable/ocata</span></div><div class="line">//指定安装openstack ocata版本，如果你想安装其他版本，则指定其他版本名即可。</div></pre></td></tr></table></figure></p>
<h3 id="创建stack用户"><a href="#创建stack用户" class="headerlink" title="创建stack用户"></a>创建<code>stack</code>用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> bash devstack/tools/create-stack-user.sh</span></div></pre></td></tr></table></figure>
<h3 id="修改devstack目录的权限，让stack用户可以访问"><a href="#修改devstack目录的权限，让stack用户可以访问" class="headerlink" title="修改devstack目录的权限，让stack用户可以访问"></a>修改<code>devstack</code>目录的权限，让stack用户可以访问</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> chown -R stack:stack /home/devstack</span></div><div class="line"><span class="meta">#</span><span class="bash"> chmod 777 /opt/stack -R</span></div></pre></td></tr></table></figure>
<h3 id="切换到stack用户下"><a href="#切换到stack用户下" class="headerlink" title="切换到stack用户下"></a>切换到<code>stack</code>用户下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> su stack</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/devstack/</span></div></pre></td></tr></table></figure>
<h3 id="创建一个local-conf文件，添加如下内容。"><a href="#创建一个local-conf文件，添加如下内容。" class="headerlink" title="创建一个local.conf文件，添加如下内容。"></a>创建一个<code>local.conf</code>文件，添加如下内容。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> vim local.conf</span></div><div class="line">[[local|localrc]]</div><div class="line">ADMIN_PASSWORD=admin</div><div class="line">DATABASE_PASSWORD=$ADMIN_PASSWORD</div><div class="line">RABBIT_PASSWORD=$ADMIN_PASSWORD</div><div class="line">SERVICE_PASSWORD=$ADMIN_PASSWORD</div></pre></td></tr></table></figure>
<h3 id="运行DevStack，执行安装"><a href="#运行DevStack，执行安装" class="headerlink" title="运行DevStack，执行安装"></a>运行<code>DevStack</code>，执行安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./stack.sh</span></div></pre></td></tr></table></figure>
<p>大约30分钟安装完成</p>
<h3 id="默认DevStack会创建admin和demo两个用户，通过设置环境变量可以进行相关的操作。进入到-home-devstack目录下。"><a href="#默认DevStack会创建admin和demo两个用户，通过设置环境变量可以进行相关的操作。进入到-home-devstack目录下。" class="headerlink" title="默认DevStack会创建admin和demo两个用户，通过设置环境变量可以进行相关的操作。进入到/home/devstack目录下。"></a>默认<code>DevStack</code>会创建<code>admin</code>和<code>demo</code>两个用户，通过设置环境变量可以进行相关的操作。进入到<code>/home/devstack</code>目录下。</h3><h4 id="admin用户："><a href="#admin用户：" class="headerlink" title="admin用户："></a><code>admin</code>用户：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> openrc admin admin</span></div></pre></td></tr></table></figure>
<h4 id="demo用户"><a href="#demo用户" class="headerlink" title="demo用户"></a><code>demo</code>用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> openrc demo demo</span></div></pre></td></tr></table></figure>
<h3 id="安装失败时，可以再次执行安装命令。"><a href="#安装失败时，可以再次执行安装命令。" class="headerlink" title="安装失败时，可以再次执行安装命令。"></a>安装失败时，可以再次执行安装命令。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./unstack.sh &amp;&amp; ./stack.sh</span></div></pre></td></tr></table></figure>
<h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><ul>
<li><p>由于在<code>DevStack</code>安装过程中，将<code>br-ex</code>的地址设置成了其他<code>IP</code>地址，因此需要将<code>br-ex</code>地址清楚掉，重新配置。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo ip addr flush br-ex</span></div></pre></td></tr></table></figure>
</li>
<li><p>然后将物理网卡<code>eth0</code>作为<code>br-ex</code>的端口，这样创建的虚拟机就可以通过<code>eth0</code>访问外部网络，外部网络也可以通过<code>Floating IP</code>访问虚拟机。下面给出配置内容。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> cat ifcfg-eth0</span></div><div class="line">TYPE=OVSPort</div><div class="line">DEVICE=eth0</div><div class="line">DEVICETYPE=ovs</div><div class="line">OVS_BRIDGE=br-ex</div><div class="line">ONBOOT=yes</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> cat ifcfg-br-ex</span></div><div class="line">TYPE=OVSBridge</div><div class="line">DEVICE=br-ex</div><div class="line">DEVICETYPE=ovs</div><div class="line">BOOTPROTO=static</div><div class="line">IPADDR=192.168.23.100</div><div class="line">NETMASK=255.255.255.0</div><div class="line">GATEWAY=192.168.23.1</div></pre></td></tr></table></figure>
</li>
<li><p>接袭来，设置<code>br-ex</code>外部网桥和重启网络。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ovs-vsctl add-port br-ex eth0</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl restart network</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="登录Dashboard"><a href="#登录Dashboard" class="headerlink" title="登录Dashboard"></a>登录<code>Dashboard</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://192.168.23.100</div><div class="line">账户名： admin</div><div class="line">密  码： admin</div></pre></td></tr></table></figure>
<p><img src="https://ljw.howieli.cn/blog/2017-6-20/dashboard.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机手动迁移]]></title>
      <url>/posts/openstack.html</url>
      <content type="html"><![CDATA[<h3 id="openstack虚拟机手动迁移"><a href="#openstack虚拟机手动迁移" class="headerlink" title="openstack虚拟机手动迁移"></a>openstack虚拟机手动迁移</h3><a id="more"></a>
<h3 id="openstack迁移计算节点的实例"><a href="#openstack迁移计算节点的实例" class="headerlink" title="openstack迁移计算节点的实例"></a>openstack迁移计算节点的实例</h3><p>您的云平台必须使用的是共享存储</p>
<h3 id="查看可以迁移到的计算节点"><a href="#查看可以迁移到的计算节点" class="headerlink" title="查看可以迁移到的计算节点"></a>查看可以迁移到的计算节点</h3><p><code># openstack compute service list</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@control161 ~]# openstack compute service list</div><div class="line">+-----+------------------+------------+----------+---------+-------+----------------------------+</div><div class="line">|  ID | Binary           | Host       | Zone     | Status  | State | Updated At                 |</div><div class="line">+-----+------------------+------------+----------+---------+-------+----------------------------+</div><div class="line">|   4 | nova-scheduler   | control161 | internal | enabled | up    | 2017-06-19T08:31:10.000000 |</div><div class="line">|  28 | nova-scheduler   | control162 | internal | enabled | up    | 2017-06-19T08:31:07.000000 |</div><div class="line">|  37 | nova-scheduler   | control163 | internal | enabled | up    | 2017-06-19T08:31:12.000000 |</div><div class="line">|  76 | nova-conductor   | control161 | internal | enabled | up    | 2017-06-19T08:31:04.000000 |</div><div class="line">|  97 | nova-conductor   | control162 | internal | enabled | up    | 2017-06-19T08:31:11.000000 |</div><div class="line">| 121 | nova-conductor   | control163 | internal | enabled | up    | 2017-06-19T08:31:04.000000 |</div><div class="line">| 136 | nova-consoleauth | control161 | internal | enabled | up    | 2017-06-19T08:31:12.000000 |</div><div class="line">| 139 | nova-consoleauth | control163 | internal | enabled | up    | 2017-06-19T08:31:06.000000 |</div><div class="line">| 142 | nova-consoleauth | control162 | internal | enabled | up    | 2017-06-19T08:31:08.000000 |</div><div class="line">| 145 | nova-compute     | compute164 | nova     | enabled | up    | 2017-06-19T08:31:08.000000 |</div><div class="line">| 148 | nova-compute     | control162 | nova     | enabled | up    | 2017-06-19T08:31:10.000000 |</div><div class="line">| 151 | nova-compute     | control161 | nova     | enabled | up    | 2017-06-19T08:31:06.000000 |</div><div class="line">| 154 | nova-compute     | control163 | nova     | enabled | up    | 2017-06-19T08:31:11.000000 |</div><div class="line">+-----+------------------+------------+----------+---------+-------+----------------------------+</div></pre></td></tr></table></figure></p>
<p>可以看到我的云平台上一共有4个计算节点</p>
<h3 id="获取需要迁移实例的列表"><a href="#获取需要迁移实例的列表" class="headerlink" title="获取需要迁移实例的列表"></a>获取需要迁移实例的列表</h3><p>我需要把control61节点上的所有虚拟机都迁移到control163上去<br><code>openstack server list --host control161 --all-projects</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@control161 ~]# openstack server list --host control161 --all-projects</div><div class="line">+--------------------------------------+--------+--------+---------------------------------+------------+</div><div class="line">| ID                                   | Name   | Status | Networks                        | Image Name |</div><div class="line">+--------------------------------------+--------+--------+---------------------------------+------------+</div><div class="line">| a834baba-68a6-4120-9f62-6ea26c6b3231 | test-5 | ACTIVE | network1=10.0.1.13              | cirros.raw |</div><div class="line">| 4e835eaf-2dfe-4ac9-a61d-4345f4722e8e | test-1 | ACTIVE | network1=10.0.1.7, 192.168.24.7 | cirros.raw |</div><div class="line">+--------------------------------------+--------+--------+---------------------------------+------------+</div></pre></td></tr></table></figure></p>
<h3 id="迁移所有的实例"><a href="#迁移所有的实例" class="headerlink" title="迁移所有的实例"></a>迁移所有的实例</h3><p>逐个迁移<br><code>openstack server migrate &lt;serverID&gt; --live control161</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@control161 ~]# openstack server migrate a834baba-68a6-4120-9f62-6ea26c6b3231 --live control163</div><div class="line">[root@control161 ~]# openstack server migrate 4e835eaf-2dfe-4ac9-a61d-4345f4722e8e --live control163</div></pre></td></tr></table></figure></p>
<h3 id="验证是否迁移成功"><a href="#验证是否迁移成功" class="headerlink" title="验证是否迁移成功"></a>验证是否迁移成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@control161 ~]# openstack server list --host control161 --all-projects</div><div class="line"></div><div class="line">[root@control161 ~]# openstack server list --host control163 --all-projects</div><div class="line">+--------------------------------------+--------+--------+----------------------------------+------------+</div><div class="line">| ID                                   | Name   | Status | Networks                         | Image Name |</div><div class="line">+--------------------------------------+--------+--------+----------------------------------+------------+</div><div class="line">| a834baba-68a6-4120-9f62-6ea26c6b3231 | test-5 | ACTIVE | network1=10.0.1.13               | cirros.raw |</div><div class="line">| 84afc9cd-f0cc-4cfb-a455-507a2aa9dc17 | test-4 | ACTIVE | network1=10.0.1.8                | cirros.raw |</div><div class="line">| 4e835eaf-2dfe-4ac9-a61d-4345f4722e8e | test-1 | ACTIVE | network1=10.0.1.7, 192.168.24.7  | cirros.raw |</div><div class="line">| 2bfd7854-55fc-4868-bc66-db9dda2cb761 | test   | ACTIVE | network1=10.0.1.10, 192.168.24.5 | cirros     |</div><div class="line">+--------------------------------------+--------+--------+----------------------------------+------------+</div></pre></td></tr></table></figure>
<p>可以看到controll61上的两台虚拟机test-1，test-5已经都到了contrll63节点上去了。</p>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在linux系统下使用awk工具详解]]></title>
      <url>/posts/Linux-awk.html</url>
      <content type="html"><![CDATA[<h3 id="在linux系统下使用awk工具详解"><a href="#在linux系统下使用awk工具详解" class="headerlink" title="在linux系统下使用awk工具详解"></a>在linux系统下使用awk工具详解</h3><a id="more"></a>
<h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><p>awk 是一个强大的文本分析工具。它不仅是 Linux 中，也是任何环境中现有的功能最强大的数据处理引擎之一。相对于 grep 的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。<br>当你第一次拿起双手在电脑上使用 awk 命令处理一个或者多个文件的时候，它会依次读取文件的每一行内容, 然后对其进行处理，awk 命令默认从 stdio 标准输入获取文件内容, awk 使用一对单引号来表示 一些可执行的脚本代码，在可执行脚本代码里面，使用一对花括号来表示一段可执行代码块，可以同时存在多个代码块。 awk 的每个花括号内同时又可以有多个指令，每一个指令用分号分隔，awk 其实就是一个脚本编程语言。说了这么多，你肯定还是一脸的懵逼。</p>
<h3 id="awk-命令的基本格式"><a href="#awk-命令的基本格式" class="headerlink" title="awk 命令的基本格式"></a>awk 命令的基本格式</h3><p><code>awk [options] &#39;program&#39; file</code><br>options 这个表示一些可选的参数选项，反正就是你爱用不用，不用可以拉到。。。<br>program 这个表示 awk 的可执行脚本代码，这个是必须要有的。 file 这个表示 awk 需要处理的文件，注意是纯文本文件，不是你的 mp3，也不是 mp4 啥的。。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> awk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网卡Bond介绍]]></title>
      <url>/posts/linux-bond.html</url>
      <content type="html"><![CDATA[<h3 id="网卡Bond介绍"><a href="#网卡Bond介绍" class="headerlink" title="网卡Bond介绍"></a>网卡Bond介绍</h3><a id="more"></a>
<h3 id="总括"><a href="#总括" class="headerlink" title="总括"></a>总括</h3><p>  Bond技术即bonding，它是一个Linux内核的一个模块，能将多块物理网卡绑定到一张虚拟网卡上的技术，并通过修改Linux的网口驱动让多块网卡看起来是一个单独的以太网接口设备并具有相同的 IP 地址。Bond技术一般用于解决网卡的单点故障或用于网卡负载较高的场景。</p>
<p>  Bond 的网卡运行在混杂模式(Promisc)下。在正常情况下，网卡只接收目的硬件地址(MAC Address)是自身MAC的以太网帧，过滤其他数据帧，以减轻驱动程序的负担。但是网卡也支持另外一种被称为混杂的模式，运行在此模式下的网卡可以接收网络上所有的数据帧。bonding就运行在这种模式下，而且修改了驱动程序中的MAC地址，将两张或多张网卡的MAC地址改成同一MAC地址。</p>
<p>网卡的bond模式一共有7种，下面详细介绍。</p>
<h3 id="模式0"><a href="#模式0" class="headerlink" title="模式0"></a>模式0</h3><p>  模式0（mode=0，round-robin）：此模式使用轮询策略，即顺序的在每一个被bond的网卡上发送数据包，这种模式提供负载均衡和容错能力。Bond0可以保证bond虚拟网卡和被bond的两张或多张物理网卡拥有相同的MAC地址，其中bond虚拟网卡的MAC地址是其中一张物理网卡的MAC地址，而bond虚拟网卡的MAC地址是根据bond自己实现的一个算法来选择的。<br>  在bond0模式下，如果一个连接或者会话的数据包从不同的网口发出，途中再经过不同的链路，则在客户端很有可能会出现数据包无序到达的现象，而无序到达的数据包一般需要重新发送，这样网络的吞吐量就会下降。同时，如果做bond0的两张或多张网卡接到了同一交换机上，还需对其配置聚合模式。</p>
<h3 id="模式1"><a href="#模式1" class="headerlink" title="模式1"></a>模式1</h3><p>  模式1（mode=1，active-backup）：此模式使用主被策略（热备）。在所有做bond1的物理网卡中，同一时刻只有一张网卡被激活，当且仅当活动网卡失效时才会激活其他的网卡。这种模式下做bond的两张或多张网卡的MAC地址和Bond虚拟网卡的MAC地址相同，而Bond的MAC地址是Bond创建启动后活动网卡（Active Slave）的MAC地址。这种模式要求主被网卡能快速的切换，即当主网卡出现故障后能迅速地切换至备用网卡。切换过程中，上层的应用几乎不受影响，因为Bond的驱动程序会临时接管上层应用的数据包，存放至数据缓冲区，等待备用网卡启动后再发送出去。但是如果切换时间过长，则会引起缓冲区的溢出，导致丢包。</p>
<h3 id="模式2"><a href="#模式2" class="headerlink" title="模式2"></a>模式2</h3><p>  模式2（mode=2，balance-xor）：xor为异或运算(二进制位相异为1，相同为0)。此模式的默认选择策略是：<br>选择网卡的序号=(源MAC地址 XOR 目标MAC地址) % Slave网卡（从网卡）的数量。<br>  其他的传输策略可以通过xmit_hash_policy配置项指定。</p>
<h3 id="模式3"><a href="#模式3" class="headerlink" title="模式3"></a>模式3</h3><p>  模式3（mode=3，broadcast）：使用广播策略，数据包会被广播至所有Slave网卡进行传送。</p>
<h3 id="模式4"><a href="#模式4" class="headerlink" title="模式4"></a>模式4</h3><p>  模式4（mode=4，802.3ad）：使用动态链接聚合策略，启动时会创建一个聚合组，所有Slave网卡共享同样的速率和双工设定。<br>必要条件：<br>  1．支持使用ethtool工具获取每个slave网卡的速率和双工设定；<br>  2．需要交换机支持IEEE 802.3ad 动态链路聚合（Dynamic link aggregation）模式</p>
<h3 id="模式5"><a href="#模式5" class="headerlink" title="模式5"></a>模式5</h3><p>  模式5（mode=5，balance-tlbtransmitload balancing）：基于每个slave网卡的速率选择传输网卡。<br>  必要条件：支持使用ethtool工具获取每个slave网卡的速率。</p>
<h3 id="模式6"><a href="#模式6" class="headerlink" title="模式6"></a>模式6</h3><p>  模式6（mode=6，balance-alb，Adaptive load balancing）：该模式包含了bond5模式，同时还支持对IPV4流量接收时的负载均衡策略(receive load balance, rlb)，而且不需要任何交换机的支持。<br>必要条件：</p>
<ol>
<li>ethtool支持获取每个slave的速率；</li>
<li>底层驱动支持设置某个网卡设备的硬件地址。</li>
</ol>
<h3 id="优劣比较"><a href="#优劣比较" class="headerlink" title="优劣比较"></a>优劣比较</h3><p>7中bond模式对比如下<br><img src="https://ljw.howieli.cn/blog/2017-5-27/bond.png" alt=""><br>  在7种模式中，最为常用的是bond0和bond1。在网络流量较大的场景下推荐使用bond0；在可靠性要求较高的场景下推荐使用bond1。</p>
<h3 id="实践操作"><a href="#实践操作" class="headerlink" title="实践操作"></a>实践操作</h3><p>下面以bond0为例，介绍一下bond的基本配置。具体步骤如下：</p>
<ol>
<li><p>配置前查看是否开启bond模块：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">modinfo bonding</div></pre></td></tr></table></figure>
</li>
<li><p>创建bond0网卡配置文件如下：  </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network-scripts/ifcfg-bond0:</div><div class="line">    DEVICE=bond0</div><div class="line">    ONBOOT=yes #自动启动</div><div class="line">    BOOTPROTO=dhcp #可以选择dhcp，static，none</div><div class="line">    USERCTL=no #该设备只能由root控制</div><div class="line">    NM_CONTROLLED=no #不需要重启网卡，实时生效</div><div class="line">    TYPE=Ethernet    #如选DHCP则需要配置IP地址等信息</div><div class="line">    #IPADDR=10.0.2.10</div><div class="line">    #NETMASK=255.255.255.0</div><div class="line">    #GATEWAY=10.0.2.1</div><div class="line">    #BONDING_OPTS="mode=0 miimon=100fail_over_mac=1"</div><div class="line">    #如果使用了BONDING_OPTS选项，则不需要再使用/etc/modprobe.conf 配置文件对绑定设备进行配置。</div></pre></td></tr></table></figure>
</li>
<li><p>配置被bond的网卡。Bonding接口创建以后，被绑定的网卡必须在他们的设置文件里面添加MASTER和SLAVE两个参数。如eth0的配置如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0:</div><div class="line">    DEVICE=eth0</div><div class="line">    ONBOOT=yes</div><div class="line">    BOOTPROTO=none</div><div class="line">    USERCTL=no</div><div class="line">    NM_CONTROLLED=no</div><div class="line">    MASTER=bond0 #属于哪个bond</div><div class="line">    SLAVE=yes #是否为从网卡，即是否被做bond</div></pre></td></tr></table></figure>
</li>
<li><p>创建并编辑<code>/etc/modprobe.d/bond.conf</code>文件，使系统在启动时加载bonding模块。添加：<br><code>alias bond0 bonding</code> //使系统在启动时加载bonding模块，对外虚拟网络接口设备为 bond0<br><code>options bond0 miimon=100 mode=0 fail_over_mac=1</code><br>其中miimon是用来进行链路监测的，其原理是检测网上的链路状态，一般将miimon值设为100，表示系统每100ms监测一次链路连接状态，如果有一条线路不通就转入另一条线路。bonding定义了网卡的4个链路状态：正常状态(BOND_LINK_UP)、网卡出现故障(BOND_LINK_FAIL)、失效状态(BOND_LINK_DOWN)和恢复状态(BOND_LINK_BACK)。<br>fail_over_mac默认等于0，当发生错误时只修改slave网卡的MAC地址而不修改bond的MAC地址；fail_over_mac=1时，当发生错误时只修改bond网卡的MAC地址而不修改slave网卡的MAC地址。这个选项只在虚拟机上进行测试时开启，如果使用物理机则不需配置。</p>
</li>
<li><p>重启机器，使用<code>cat /proc/net/bonding/bondX</code>命令查看bond配置是否生效。<br> 注：必须关闭NetworkManger服务，否则会和bond冲突</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux bond </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tmux Linux 分屏工具]]></title>
      <url>/posts/linux-tmux.html</url>
      <content type="html"><![CDATA[<h3 id="tmux介绍"><a href="#tmux介绍" class="headerlink" title="tmux介绍"></a>tmux介绍</h3><a id="more"></a>
<p>tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。<br>有一本关于Tmux的书tmux：<a href="https://www.amazon.com/tmux-Productive-Development-Brian-Hogan/dp/1934356964" target="_blank" rel="external">Productive Mouse-Free Development</a><br>自己在centos7.2系统上简单的使用了一下</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum install tmux -y</span></div></pre></td></tr></table></figure>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Ctrl+b ? 显示快捷键帮助</div><div class="line">Ctrl+b C-o 调换窗口位置，类似与vim 里的C-w</div><div class="line">Ctrl+b 空格键 采用下一个内置布局</div><div class="line">Ctrl+b ! 把当前窗口变为新窗口</div><div class="line">Ctrl+b “ 横向分隔窗口</div><div class="line">Ctrl+b % 纵向分隔窗口</div><div class="line">Ctrl+b q 显示分隔窗口的编号</div><div class="line">Ctrl+b o 跳到下一个分隔窗口</div><div class="line">Ctrl+b 上下键 上一个及下一个分隔窗口</div><div class="line">Ctrl+b C-方向键 调整分隔窗口大小</div><div class="line">Ctrl+b c 创建新窗口</div><div class="line">Ctrl+b 0~9 选择几号窗口</div><div class="line">Ctrl+b c 创建新窗口</div><div class="line">Ctrl+b n 选择下一个窗口</div><div class="line">Ctrl+b l 切换到最后使用的窗口</div><div class="line">Ctrl+b p 选择前一个窗口</div><div class="line">Ctrl+b w 以菜单方式显示及选择窗口</div><div class="line">Ctrl+b t 显示时钟</div><div class="line">Ctrl+b ; 切换到最后一个使用的面板</div><div class="line">Ctrl+b x 关闭面板</div><div class="line">Ctrl+b &amp; 关闭窗口</div><div class="line">Ctrl+b s 以菜单方式显示和选择会话</div><div class="line">Ctrl+b d 退出tumx，并保存当前会话，这时，tmux仍在后台运行，可以通过tmux attach进入 到指定的会话</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tmux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[openstack实例启动流程]]></title>
      <url>/posts/openstack-blog.html</url>
      <content type="html"><![CDATA[<h3 id="openstack实例启动流程"><a href="#openstack实例启动流程" class="headerlink" title="openstack实例启动流程"></a>openstack实例启动流程</h3><a id="more"></a>
<p><img src="https://ljw.howieli.cn/blog/2017-5-26/openstack.png" alt=""><br>1.客户端使用自己的用户名密码请求认证。<br>2.keystone通过查询在keystone的数据库user表中保存了user的相关信息，包括password加密后的hash值，并返回一个token_id（令牌），和serviceCatalog(一些服务的endpoint地址，cinder、glance-api后面下载镜像和创建块存储时会用到)。<br>3.客户端带上keystone返回的token_id和创建虚机的相关参数，Post请求nova-api创建虚拟机<br>4.nova-api接收到请求后，首先使用请求携带的token_id来访问该api，以验证请求是否有效。<br>5.keystone验证通过后返回更新后的认证信息。<br>6.nova api检查创建虚拟机参数是否有效与合法。<br>检查虚拟机name是否符合命名规范，flavor_id是否在数据库中存在，image_uuid是否是正确的uuid格式<br>检查instance、vcpu、ram的数量是否超过配额。<br>7.当且仅当所有传参都有效合法时，更新nova数据库，新建一条instance记录，vm_states设为BUILDING，task_state设为SCHEDULING.<br>8.nova api 远程调用传递请求、参数给nova scheduler，把消息“请给我创建一台虚拟机”丢到消息队列，然后定期查询虚机的状态。<br>9.nova scheduler从queue中获取到这条消息<br>10.nova scheduler访问nova 数据库，通过调度算法，过滤出一些合适的计算节点，然后进行排序。<br>11.更新虚机节点信息，返回一个最优节点id给nova scheduler。<br>12.nova scheduler选定host之后，通过rpc调用nova-compute服务，把“创建虚机请求”消息丢个mq。<br>13.nova compute收到创建虚拟机请求的消息<br>nova-compute有个定时任务，定期从数据库中查找到运行在该节点上的所有虚拟机信息，统计得到空闲内存大小和空闲磁盘大小。然后更新数据库compute_node信息，以保证调度的准确性。<br>14.nova compute通过rpc查询nova数据库中虚机的信息例如主机模板和id<br>15.nova conductor从消息队列中拿到请求查询数据库<br>16.nova conductor查询nova数据库<br>17.数据库返回虚机信息<br>18.nova compute从消息队列中获取信息。<br>19.nova compute 请求glance 的rest api，下载所需要的镜像，一般是qcow2的。<br>20.glance api 也会去验证请求的token的有效性。<br>21.glance api 返回镜像信息给nova-compute。<br>22.同理，nova compute请求neutron api配置网络，例如获取虚机ip地址<br>23.验证token的有效性<br>24.neutron返回网络信息<br>25-27 同glance、neutron验证token返回块设备信息<br>28.据上面配置的虚拟机信息，生成xml，写入libvirt,xml文件，然后调用libvirt driver去使用libvirt.xml文件启动虚拟机。</p>
]]></content>
      
        <categories>
            
            <category> openstack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openstack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python环境准备]]></title>
      <url>/posts/python-blog.html</url>
      <content type="html"><![CDATA[<h3 id="pyenv配置"><a href="#pyenv配置" class="headerlink" title="pyenv配置"></a>pyenv配置</h3><a id="more"></a>
<ol>
<li>安装git <code>yum -y install git</code></li>
<li>安装pyenv <code>curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</code></li>
<li><p>配置环境变量，在<code>~/.bash_profile</code>里增加。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=<span class="string">"~/.pyenv/bin:<span class="variable">$PATH</span>"</span></div><div class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></div><div class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>安装编译工具<code>yum -y install gcc make patch</code></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
