<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李家旺</title>
  <subtitle>学习日记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lijiawang.org/"/>
  <updated>2017-06-25T00:17:04.162Z</updated>
  <id>https://www.lijiawang.org/</id>
  
  <author>
    <name>李家旺</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用kolla快速搭建openstack-ocata单节点</title>
    <link href="https://www.lijiawang.org/posts/kolla-openstack-ocata.html"/>
    <id>https://www.lijiawang.org/posts/kolla-openstack-ocata.html</id>
    <published>2017-06-25T00:09:37.000Z</published>
    <updated>2017-06-25T00:17:04.162Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用kolla快速安装openstack-ocata单节点"><a href="#利用kolla快速安装openstack-ocata单节点" class="headerlink" title="利用kolla快速安装openstack-ocata单节点"></a>利用<code>kolla</code>快速安装<code>openstack-ocata</code>单节点</h3><a id="more"></a>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><p>我还是使用大家最常用的<code>vmware workstation 12.0</code>, <code>CentOS 7.3</code>虚拟机来完成整个的验证过程<br>在虚拟机安装<code>centos7.3</code>我就不再这里多说了,选择最小化安装即可。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> cat /etc/redhat-release </span></div><div class="line">CentOS Linux release 7.3.1611 (Core)</div></pre></td></tr></table></figure>
</li>
<li><p>kolla的安装，要求目标机器是两块网卡，所以我虚拟机也是分配两块网卡</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ip a|grep eno</span></div><div class="line">2: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</div><div class="line">    inet 192.168.18.131/24 brd 192.168.18.255 scope global dynamic eno16777736</div><div class="line">3: eno33554960: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master ovs-system state UP qlen 1000</div><div class="line">    inet 192.168.18.30/24 brd 192.168.18.255 scope global eno33554960</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>eno16777736</code>:设置的IP是：<code>192.168.18.131</code>，日后<code>Horizon</code>访问就是通过这个<code>IP</code>地址<br><code>eno33554960</code>:设置的IP是：<code>192.168.18.30</code>，这个是让<code>neutron</code>的<code>br-ex</code>绑定使用，虚拟机是通过这块网卡访问外网。</p>
<ul>
<li><p>修改主机名</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> hostname</span></div><div class="line">localhost.localdomain</div><div class="line"><span class="meta">#</span><span class="bash"> hostnamectl <span class="built_in">set</span>-hostname kolla</span></div></pre></td></tr></table></figure>
</li>
<li><p>关闭<code>firewalld</code>和<code>iptables</code><br><code>centos7</code>以上系统默认防火墙是<code>firewalld</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl stop firewalld</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl status firewalld</span></div></pre></td></tr></table></figure>
</li>
<li><p>关闭<code>selinux</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> sed -i <span class="string">"s/SELINUX=enforcing/SELINUX=disabled/"</span> /etc/selinux/config</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看虚拟机是开启了虚拟</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> egrep <span class="string">"vmx|svm"</span> /proc/cpuinfo</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果没有开启虚拟化请开启虚拟化说</p>
<ul>
<li>重启系统<code>reboot</code>生效<h3 id="安装基础包"><a href="#安装基础包" class="headerlink" title="安装基础包"></a>安装基础包</h3></li>
<li><p>一定要先启用<code>EPEL</code>的<code>repo</code>源</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum install epel-release -y</span></div></pre></td></tr></table></figure>
</li>
<li><p>安装基础软件包</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum install vim net-tools tmux python-devel libffi-devel gcc openssl-devel git python-pip -y</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装<code>docker</code></h3><ul>
<li><p>设置<code>repo</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> tee /etc/yum.repos.d/docker.repo &lt;&lt; <span class="string">'EOF'</span></span></div><div class="line">[dockerrepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://yum.dockerproject.org/gpg</div><div class="line">EOF</div></pre></td></tr></table></figure>
</li>
<li><p>安装<code>Docker 1.12.5</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum install docker-engine-1.12.5 docker-engine-selinux-1.12.5 -y</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置<code>docker</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> mkdir /etc/systemd/system/docker.service.d</span></div><div class="line"><span class="meta">#</span><span class="bash"> tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; <span class="string">'EOF'</span></span></div><div class="line">[Service]</div><div class="line">MountFlags=shared</div><div class="line">EOF</div></pre></td></tr></table></figure>
</li>
<li><p>重启先关服务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> systemctl daemon-reload</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> docker</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl restart docker</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl status docker</span></div></pre></td></tr></table></figure>
</li>
<li><p>访问私有的<code>Docker</code>仓库<br>查看网卡的<code>ip</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ip a|grep eno16777736 |grep inet|awk <span class="string">'&#123;print $2&#125;'</span>|cut <span class="_">-d</span>/ <span class="_">-f</span>1</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>编辑<code>/usr/lib/systemd/system/docker.service</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ExecStart=/usr/bin/dockerd</span></div><div class="line">ExecStart=/usr/bin/dockerd --insecure-registry 192.168.18.131:4000</div></pre></td></tr></table></figure></p>
<ul>
<li>重启服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> systemctl daemon-reload</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl restart docker</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装Ansible"><a href="#安装Ansible" class="headerlink" title="安装Ansible"></a>安装<code>Ansible</code></h3><p><code>Kolla</code>项目的<code>Mitaka</code>版本要求<code>ansible</code>版本低于<code>2.0</code>，<code>Newton</code>版本以后的就只支持<code>2.x</code>以上的版本。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum -y install ansible</span></div></pre></td></tr></table></figure></p>
<h3 id="搭建Registry服务器"><a href="#搭建Registry服务器" class="headerlink" title="搭建Registry服务器"></a>搭建<code>Registry</code>服务器</h3><p>默认<code>docker</code>的<code>registry</code>是使用<code>5000</code>端口，对于<code>OpenStack</code>来说，有端口冲突，所以我将端口改成了<code>4000</code>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> docker run <span class="_">-d</span> -v /opt/registry:/var/lib/registry -p 4000:5000 \</span></div><div class="line">--restart=always --name registry registry:2</div></pre></td></tr></table></figure></p>
<h3 id="下载kolla官方提供的ocata镜像"><a href="#下载kolla官方提供的ocata镜像" class="headerlink" title="下载kolla官方提供的ocata镜像"></a>下载<code>kolla</code>官方提供的<code>ocata</code>镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> wget http://tarballs.openstack.org/kolla/images/centos-source-registry-ocata.tar.gz</span></div><div class="line"><span class="meta">#</span><span class="bash"> du -sh centos-source-registry-ocata.tar.gz </span></div><div class="line">3.0G	centos-source-registry-ocata.tar.gz</div><div class="line"><span class="meta">#</span><span class="bash"> tar zxf centos-source-registry-ocata.tar.gz -C /opt/registry/</span></div></pre></td></tr></table></figure>
<p><code>centos-source-registry-ocata</code>大约有3G。</p>
<h3 id="kolla-ansible"><a href="#kolla-ansible" class="headerlink" title="kolla-ansible"></a><code>kolla-ansible</code></h3><ul>
<li><p>下载<code>kolla-ansible</code>的代码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> http://git.trystack.cn/openstack/kolla-ansible -b stable/ocata</span></div></pre></td></tr></table></figure>
</li>
<li><p>安装<code>kolla-ansible</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> kolla-ansible/</span></div><div class="line"><span class="meta">#</span><span class="bash"> pip install . -i https://pypi.tuna.tsinghua.edu.cn/simple</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果<code>pip</code>速度很慢，后面可以加上参数<code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code>，指定国内的<code>pip</code>源</p>
<ul>
<li><p>复制相关文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> cp -r etc/kolla /etc/kolla/</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>如果是在虚拟机里装<code>kolla</code>，希望可以启动再启动虚拟机，那么你需要把<code>virt_type=qemu</code>，默认是<code>kvm</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir -p /etc/kolla/config/nova</div><div class="line">cat &lt;&lt; EOF &gt; /etc/kolla/config/nova/nova-compute.conf</div><div class="line">[libvirt]</div><div class="line">virt_type=qemu</div><div class="line">cpu_mode = none</div><div class="line">EOF</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装kolla"><a href="#安装kolla" class="headerlink" title="安装kolla"></a>安装<code>kolla</code></h3><ul>
<li><p>生成密码文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> kolla-genpwd</span></div></pre></td></tr></table></figure>
</li>
<li><p>编辑 <code>/etc/kolla/passwords.yml</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vim /etc/kolla/passwords.yml</span></div><div class="line">keystone_admin_password: admin</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这是登录<code>Dashboard</code>，<code>admin</code>使用的密码，你可以根据自己需要进行修改</p>
<ul>
<li>编辑<code>/etc/kolla/globals.yml</code>文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vim /etc/kolla/globals.yml</span></div><div class="line">kolla_base_distro: "centos"</div><div class="line">kolla_install_type: "source"</div><div class="line">openstack_release: "4.0.3"</div><div class="line">kolla_internal_vip_address: "192.168.18.100"</div><div class="line">docker_registry: "192.168.18.131:4000"</div><div class="line">docker_namespace: "lokolla"</div><div class="line">network_interface: "eno16777736"</div><div class="line">neutron_external_interface: "eno33554960"</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果不知道<code>openstack_release</code>和<code>docker_namespace</code>请查看<br><code># cd /opt/registry/docker/registry/v2/repositories/lokolla/centos-source-keepalived/_manifests/tags/4.0.3/</code><br>就可以知道<code>openstack_release</code>为<code>4.0.3</code>和<code>docker_namespace</code>为<code>lokolla</code>了。</p>
<h3 id="验证部署"><a href="#验证部署" class="headerlink" title="验证部署"></a>验证部署</h3><ul>
<li><p>验证</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> kolla-ansible prechecks -i kolla-ansible/ansible/inventory/all-in-one</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>pull</code>镜像</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> kolla-ansible pull -i kolla-ansible/ansible/inventory/all-in-one</span></div></pre></td></tr></table></figure>
</li>
<li><p>部署</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> kolla-ansible deploy -i kolla-ansible/ansible/inventory/all-in-one</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>大约半个小时基本上就部署完成了</p>
<h3 id="验证部署-1"><a href="#验证部署-1" class="headerlink" title="验证部署"></a>验证部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> kolla-ansible post-deploy</span></div></pre></td></tr></table></figure>
<p>这样就创建 <code>/etc/kolla/admin-openrc.sh</code>文件</p>
<h3 id="安装安装OpenStack-client端"><a href="#安装安装OpenStack-client端" class="headerlink" title="安装安装OpenStack client端"></a>安装安装<code>OpenStack client</code>端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> pip install python-openstackclient</span></div></pre></td></tr></table></figure>
<h3 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h3><p><img src="https://ljw.howieli.cn/blog/2017-6-23/dashboard.jpg" alt=""><br>账号：<code>admin</code><br>密码：<code>admin</code></p>
<h3 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h3><ul>
<li><p>编辑 <code>/usr/share/kolla-ansible/init-runonce</code><br>网络需要根据实际情况修改,我都是用的<code>nat</code>模式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EXT_NET_CIDR='192.168.18.0/24'</div><div class="line">EXT_NET_RANGE='start=192.168.18.10,end=192.168.18.20'</div><div class="line">EXT_NET_GATEWAY='192.168.18.2'</div></pre></td></tr></table></figure>
</li>
<li><p>运行脚本创建</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source /etc/kolla/admin-openrc.sh</div><div class="line">bash /usr/share/kolla-ansible/init-runonce</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="最后进入dashboard创建虚拟机，绑定浮动ip"><a href="#最后进入dashboard创建虚拟机，绑定浮动ip" class="headerlink" title="最后进入dashboard创建虚拟机，绑定浮动ip"></a>最后进入<code>dashboard</code>创建虚拟机，绑定浮动<code>ip</code></h3><p>这里我就不多说了，进入<code>dashboard</code>创建与主机即可，网络选择<code>demo-net</code>网络，创建完成后标定浮动<code>ip</code>即可。</p>
<h3 id="检查虚拟网络"><a href="#检查虚拟网络" class="headerlink" title="检查虚拟网络"></a>检查虚拟网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> openstack server list</span></div><div class="line">+--------------------------------------+------+--------+----------------------------------+------------+</div><div class="line">| ID                                   | Name | Status | Networks                         | Image Name |</div><div class="line">+--------------------------------------+------+--------+----------------------------------+------------+</div><div class="line">| 0267025b-8193-42ee-8551-67b7625482ab | tets | ACTIVE | demo-net=10.0.0.6, 192.168.18.12 | cirros     |</div><div class="line">+--------------------------------------+------+--------+----------------------------------+------------+</div><div class="line"><span class="meta">#</span><span class="bash"> ping 192.168.18.12 -c 3</span></div><div class="line">PING 192.168.18.12 (192.168.18.12) 56(84) bytes of data.</div><div class="line">64 bytes from 192.168.18.12: icmp_seq=1 ttl=63 time=1.85 ms</div><div class="line">64 bytes from 192.168.18.12: icmp_seq=2 ttl=63 time=1.46 ms</div><div class="line">64 bytes from 192.168.18.12: icmp_seq=3 ttl=63 time=5.94 ms</div><div class="line">--- 192.168.18.12 ping statistics ---</div><div class="line">3 packets transmitted, 3 received, 0% packet loss, time 2005ms</div><div class="line">rtt min/avg/max/mdev = 1.466/3.087/5.942/2.025 ms</div></pre></td></tr></table></figure>
<h3 id="检查虚拟机是能能通外网"><a href="#检查虚拟机是能能通外网" class="headerlink" title="检查虚拟机是能能通外网"></a>检查虚拟机是能能通外网</h3><p><code>cirros</code>用户密码默认为<code>cubswin:)</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ssh cirros@192.168.18.12</span></div><div class="line">cirros@192.168.18.12's password: </div><div class="line"><span class="meta">$</span><span class="bash"> ip a</span></div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue </div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    inet 127.0.0.1/8 scope host lo</div><div class="line">    inet6 ::1/128 scope host </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc pfifo_fast qlen 1000</div><div class="line">    link/ether fa:16:3e:82:4e:f8 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 10.0.0.6/24 brd 10.0.0.255 scope global eth0</div><div class="line">    inet6 fe80::f816:3eff:fe82:4ef8/64 scope link </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line"><span class="meta">$</span><span class="bash"> ping 8.8.8.8 -c 2</span></div><div class="line">PING 8.8.8.8 (8.8.8.8): 56 data bytes</div><div class="line">64 bytes from 8.8.8.8: seq=0 ttl=127 time=171.481 ms</div><div class="line">64 bytes from 8.8.8.8: seq=1 ttl=127 time=171.464 ms</div><div class="line">--- 8.8.8.8 ping statistics ---</div><div class="line">2 packets transmitted, 2 packets received, 0% packet loss</div><div class="line">round-trip min/avg/max = 171.464/171.472/171.481 ms</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;利用kolla快速安装openstack-ocata单节点&quot;&gt;&lt;a href=&quot;#利用kolla快速安装openstack-ocata单节点&quot; class=&quot;headerlink&quot; title=&quot;利用kolla快速安装openstack-ocata单节点&quot;&gt;&lt;/a&gt;利用&lt;code&gt;kolla&lt;/code&gt;快速安装&lt;code&gt;openstack-ocata&lt;/code&gt;单节点&lt;/h3&gt;
    
    </summary>
    
      <category term="openstack" scheme="https://www.lijiawang.org/categories/openstack/"/>
    
    
      <category term="openstack" scheme="https://www.lijiawang.org/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>DevStack</title>
    <link href="https://www.lijiawang.org/posts/Openstack-DevStack-ocata.html"/>
    <id>https://www.lijiawang.org/posts/Openstack-DevStack-ocata.html</id>
    <published>2017-06-20T12:37:28.000Z</published>
    <updated>2017-06-25T00:21:44.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DevStack安装openstack"><a href="#DevStack安装openstack" class="headerlink" title="DevStack安装openstack"></a><code>DevStack</code>安装<code>openstack</code></h3><a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="关闭iptables防火墙或firewalld防火墙"><a href="#关闭iptables防火墙或firewalld防火墙" class="headerlink" title="关闭iptables防火墙或firewalld防火墙"></a>关闭<code>iptables</code>防火墙或<code>firewalld</code>防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> systemctl stop iptables</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">disable</span> iptables</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl stop firewalld</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld</span></div></pre></td></tr></table></figure>
<h4 id="关闭SElinux"><a href="#关闭SElinux" class="headerlink" title="关闭SElinux"></a>关闭<code>SElinux</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> sed -i <span class="string">'SELINUX=enforcing/SELINUX=disable/'</span> /etc/selinux/config</span></div><div class="line"><span class="meta">#</span><span class="bash"> reboot</span></div></pre></td></tr></table></figure>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装<code>git</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum -y install epel-release git</span></div></pre></td></tr></table></figure>
<h3 id="准备openstack环境"><a href="#准备openstack环境" class="headerlink" title="准备openstack环境"></a>准备<code>openstack</code>环境</h3><p>下载代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /home</span></div><div class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/openstack-dev/devstack -b stable/ocata</span></div><div class="line">//指定安装openstack ocata版本，如果你想安装其他版本，则指定其他版本名即可。</div></pre></td></tr></table></figure></p>
<h3 id="创建stack用户"><a href="#创建stack用户" class="headerlink" title="创建stack用户"></a>创建<code>stack</code>用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> bash devstack/tools/create-stack-user.sh</span></div></pre></td></tr></table></figure>
<h3 id="修改devstack目录的权限，让stack用户可以访问"><a href="#修改devstack目录的权限，让stack用户可以访问" class="headerlink" title="修改devstack目录的权限，让stack用户可以访问"></a>修改<code>devstack</code>目录的权限，让stack用户可以访问</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> chown -R stack:stack /home/devstack</span></div><div class="line"><span class="meta">#</span><span class="bash"> chmod 777 /opt/stack -R</span></div></pre></td></tr></table></figure>
<h3 id="切换到stack用户下"><a href="#切换到stack用户下" class="headerlink" title="切换到stack用户下"></a>切换到<code>stack</code>用户下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> su stack</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /home/devstack/</span></div></pre></td></tr></table></figure>
<h3 id="创建一个local-conf文件，添加如下内容。"><a href="#创建一个local-conf文件，添加如下内容。" class="headerlink" title="创建一个local.conf文件，添加如下内容。"></a>创建一个<code>local.conf</code>文件，添加如下内容。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> vim local.conf</span></div><div class="line">[[local|localrc]]</div><div class="line">ADMIN_PASSWORD=admin</div><div class="line">DATABASE_PASSWORD=$ADMIN_PASSWORD</div><div class="line">RABBIT_PASSWORD=$ADMIN_PASSWORD</div><div class="line">SERVICE_PASSWORD=$ADMIN_PASSWORD</div></pre></td></tr></table></figure>
<h3 id="运行DevStack，执行安装"><a href="#运行DevStack，执行安装" class="headerlink" title="运行DevStack，执行安装"></a>运行<code>DevStack</code>，执行安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./stack.sh</span></div></pre></td></tr></table></figure>
<p>大约30分钟安装完成</p>
<h3 id="默认DevStack会创建admin和demo两个用户，通过设置环境变量可以进行相关的操作。进入到-home-devstack目录下。"><a href="#默认DevStack会创建admin和demo两个用户，通过设置环境变量可以进行相关的操作。进入到-home-devstack目录下。" class="headerlink" title="默认DevStack会创建admin和demo两个用户，通过设置环境变量可以进行相关的操作。进入到/home/devstack目录下。"></a>默认<code>DevStack</code>会创建<code>admin</code>和<code>demo</code>两个用户，通过设置环境变量可以进行相关的操作。进入到<code>/home/devstack</code>目录下。</h3><h4 id="admin用户："><a href="#admin用户：" class="headerlink" title="admin用户："></a><code>admin</code>用户：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> openrc admin admin</span></div></pre></td></tr></table></figure>
<h4 id="demo用户"><a href="#demo用户" class="headerlink" title="demo用户"></a><code>demo</code>用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> openrc demo demo</span></div></pre></td></tr></table></figure>
<h3 id="安装失败时，可以再次执行安装命令。"><a href="#安装失败时，可以再次执行安装命令。" class="headerlink" title="安装失败时，可以再次执行安装命令。"></a>安装失败时，可以再次执行安装命令。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./unstack.sh &amp;&amp; ./stack.sh</span></div></pre></td></tr></table></figure>
<h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><ul>
<li><p>由于在<code>DevStack</code>安装过程中，将<code>br-ex</code>的地址设置成了其他<code>IP</code>地址，因此需要将<code>br-ex</code>地址清楚掉，重新配置。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo ip addr flush br-ex</span></div></pre></td></tr></table></figure>
</li>
<li><p>然后将物理网卡<code>eth0</code>作为<code>br-ex</code>的端口，这样创建的虚拟机就可以通过<code>eth0</code>访问外部网络，外部网络也可以通过<code>Floating IP</code>访问虚拟机。下面给出配置内容。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> cat ifcfg-eth0</span></div><div class="line">TYPE=OVSPort</div><div class="line">DEVICE=eth0</div><div class="line">DEVICETYPE=ovs</div><div class="line">OVS_BRIDGE=br-ex</div><div class="line">ONBOOT=yes</div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> cat ifcfg-br-ex</span></div><div class="line">TYPE=OVSBridge</div><div class="line">DEVICE=br-ex</div><div class="line">DEVICETYPE=ovs</div><div class="line">BOOTPROTO=static</div><div class="line">IPADDR=192.168.23.100</div><div class="line">NETMASK=255.255.255.0</div><div class="line">GATEWAY=192.168.23.1</div></pre></td></tr></table></figure>
</li>
<li><p>接袭来，设置<code>br-ex</code>外部网桥和重启网络。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> ovs-vsctl add-port br-ex eth0</span></div><div class="line"><span class="meta">#</span><span class="bash"> systemctl restart network</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="登录Dashboard"><a href="#登录Dashboard" class="headerlink" title="登录Dashboard"></a>登录<code>Dashboard</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://192.168.23.100</div><div class="line">账户名： admin</div><div class="line">密  码： admin</div></pre></td></tr></table></figure>
<p><img src="https://ljw.howieli.cn/blog/2017-6-20/dashboard.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DevStack安装openstack&quot;&gt;&lt;a href=&quot;#DevStack安装openstack&quot; class=&quot;headerlink&quot; title=&quot;DevStack安装openstack&quot;&gt;&lt;/a&gt;&lt;code&gt;DevStack&lt;/code&gt;安装&lt;code&gt;openstack&lt;/code&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="openstack" scheme="https://www.lijiawang.org/categories/openstack/"/>
    
    
      <category term="openstack" scheme="https://www.lijiawang.org/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机手动迁移</title>
    <link href="https://www.lijiawang.org/posts/openstack.html"/>
    <id>https://www.lijiawang.org/posts/openstack.html</id>
    <published>2017-06-19T13:04:48.000Z</published>
    <updated>2017-06-25T00:24:39.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="openstack虚拟机手动迁移"><a href="#openstack虚拟机手动迁移" class="headerlink" title="openstack虚拟机手动迁移"></a>openstack虚拟机手动迁移</h3><a id="more"></a>
<h3 id="openstack迁移计算节点的实例"><a href="#openstack迁移计算节点的实例" class="headerlink" title="openstack迁移计算节点的实例"></a>openstack迁移计算节点的实例</h3><p>您的云平台必须使用的是共享存储</p>
<h3 id="查看可以迁移到的计算节点"><a href="#查看可以迁移到的计算节点" class="headerlink" title="查看可以迁移到的计算节点"></a>查看可以迁移到的计算节点</h3><p><code># openstack compute service list</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@control161 ~]# openstack compute service list</div><div class="line">+-----+------------------+------------+----------+---------+-------+----------------------------+</div><div class="line">|  ID | Binary           | Host       | Zone     | Status  | State | Updated At                 |</div><div class="line">+-----+------------------+------------+----------+---------+-------+----------------------------+</div><div class="line">|   4 | nova-scheduler   | control161 | internal | enabled | up    | 2017-06-19T08:31:10.000000 |</div><div class="line">|  28 | nova-scheduler   | control162 | internal | enabled | up    | 2017-06-19T08:31:07.000000 |</div><div class="line">|  37 | nova-scheduler   | control163 | internal | enabled | up    | 2017-06-19T08:31:12.000000 |</div><div class="line">|  76 | nova-conductor   | control161 | internal | enabled | up    | 2017-06-19T08:31:04.000000 |</div><div class="line">|  97 | nova-conductor   | control162 | internal | enabled | up    | 2017-06-19T08:31:11.000000 |</div><div class="line">| 121 | nova-conductor   | control163 | internal | enabled | up    | 2017-06-19T08:31:04.000000 |</div><div class="line">| 136 | nova-consoleauth | control161 | internal | enabled | up    | 2017-06-19T08:31:12.000000 |</div><div class="line">| 139 | nova-consoleauth | control163 | internal | enabled | up    | 2017-06-19T08:31:06.000000 |</div><div class="line">| 142 | nova-consoleauth | control162 | internal | enabled | up    | 2017-06-19T08:31:08.000000 |</div><div class="line">| 145 | nova-compute     | compute164 | nova     | enabled | up    | 2017-06-19T08:31:08.000000 |</div><div class="line">| 148 | nova-compute     | control162 | nova     | enabled | up    | 2017-06-19T08:31:10.000000 |</div><div class="line">| 151 | nova-compute     | control161 | nova     | enabled | up    | 2017-06-19T08:31:06.000000 |</div><div class="line">| 154 | nova-compute     | control163 | nova     | enabled | up    | 2017-06-19T08:31:11.000000 |</div><div class="line">+-----+------------------+------------+----------+---------+-------+----------------------------+</div></pre></td></tr></table></figure></p>
<p>可以看到我的云平台上一共有4个计算节点</p>
<h3 id="获取需要迁移实例的列表"><a href="#获取需要迁移实例的列表" class="headerlink" title="获取需要迁移实例的列表"></a>获取需要迁移实例的列表</h3><p>我需要把control61节点上的所有虚拟机都迁移到control163上去<br><code>openstack server list --host control161 --all-projects</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@control161 ~]# openstack server list --host control161 --all-projects</div><div class="line">+--------------------------------------+--------+--------+---------------------------------+------------+</div><div class="line">| ID                                   | Name   | Status | Networks                        | Image Name |</div><div class="line">+--------------------------------------+--------+--------+---------------------------------+------------+</div><div class="line">| a834baba-68a6-4120-9f62-6ea26c6b3231 | test-5 | ACTIVE | network1=10.0.1.13              | cirros.raw |</div><div class="line">| 4e835eaf-2dfe-4ac9-a61d-4345f4722e8e | test-1 | ACTIVE | network1=10.0.1.7, 192.168.24.7 | cirros.raw |</div><div class="line">+--------------------------------------+--------+--------+---------------------------------+------------+</div></pre></td></tr></table></figure></p>
<h3 id="迁移所有的实例"><a href="#迁移所有的实例" class="headerlink" title="迁移所有的实例"></a>迁移所有的实例</h3><p>逐个迁移<br><code>openstack server migrate &lt;serverID&gt; --live control161</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@control161 ~]# openstack server migrate a834baba-68a6-4120-9f62-6ea26c6b3231 --live control163</div><div class="line">[root@control161 ~]# openstack server migrate 4e835eaf-2dfe-4ac9-a61d-4345f4722e8e --live control163</div></pre></td></tr></table></figure></p>
<h3 id="验证是否迁移成功"><a href="#验证是否迁移成功" class="headerlink" title="验证是否迁移成功"></a>验证是否迁移成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@control161 ~]# openstack server list --host control161 --all-projects</div><div class="line"></div><div class="line">[root@control161 ~]# openstack server list --host control163 --all-projects</div><div class="line">+--------------------------------------+--------+--------+----------------------------------+------------+</div><div class="line">| ID                                   | Name   | Status | Networks                         | Image Name |</div><div class="line">+--------------------------------------+--------+--------+----------------------------------+------------+</div><div class="line">| a834baba-68a6-4120-9f62-6ea26c6b3231 | test-5 | ACTIVE | network1=10.0.1.13               | cirros.raw |</div><div class="line">| 84afc9cd-f0cc-4cfb-a455-507a2aa9dc17 | test-4 | ACTIVE | network1=10.0.1.8                | cirros.raw |</div><div class="line">| 4e835eaf-2dfe-4ac9-a61d-4345f4722e8e | test-1 | ACTIVE | network1=10.0.1.7, 192.168.24.7  | cirros.raw |</div><div class="line">| 2bfd7854-55fc-4868-bc66-db9dda2cb761 | test   | ACTIVE | network1=10.0.1.10, 192.168.24.5 | cirros     |</div><div class="line">+--------------------------------------+--------+--------+----------------------------------+------------+</div></pre></td></tr></table></figure>
<p>可以看到controll61上的两台虚拟机test-1，test-5已经都到了contrll63节点上去了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;openstack虚拟机手动迁移&quot;&gt;&lt;a href=&quot;#openstack虚拟机手动迁移&quot; class=&quot;headerlink&quot; title=&quot;openstack虚拟机手动迁移&quot;&gt;&lt;/a&gt;openstack虚拟机手动迁移&lt;/h3&gt;
    
    </summary>
    
      <category term="openstack" scheme="https://www.lijiawang.org/categories/openstack/"/>
    
    
      <category term="openstack" scheme="https://www.lijiawang.org/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>在linux系统下使用awk工具详解</title>
    <link href="https://www.lijiawang.org/posts/Linux-awk.html"/>
    <id>https://www.lijiawang.org/posts/Linux-awk.html</id>
    <published>2017-05-28T03:52:20.000Z</published>
    <updated>2017-05-28T07:49:27.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在linux系统下使用awk工具详解"><a href="#在linux系统下使用awk工具详解" class="headerlink" title="在linux系统下使用awk工具详解"></a>在linux系统下使用awk工具详解</h3><a id="more"></a>
<h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><p>awk 是一个强大的文本分析工具。它不仅是 Linux 中，也是任何环境中现有的功能最强大的数据处理引擎之一。相对于 grep 的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。<br>当你第一次拿起双手在电脑上使用 awk 命令处理一个或者多个文件的时候，它会依次读取文件的每一行内容, 然后对其进行处理，awk 命令默认从 stdio 标准输入获取文件内容, awk 使用一对单引号来表示 一些可执行的脚本代码，在可执行脚本代码里面，使用一对花括号来表示一段可执行代码块，可以同时存在多个代码块。 awk 的每个花括号内同时又可以有多个指令，每一个指令用分号分隔，awk 其实就是一个脚本编程语言。说了这么多，你肯定还是一脸的懵逼。</p>
<h3 id="awk-命令的基本格式"><a href="#awk-命令的基本格式" class="headerlink" title="awk 命令的基本格式"></a>awk 命令的基本格式</h3><p><code>awk [options] &#39;program&#39; file</code><br>options 这个表示一些可选的参数选项，反正就是你爱用不用，不用可以拉到。。。<br>program 这个表示 awk 的可执行脚本代码，这个是必须要有的。 file 这个表示 awk 需要处理的文件，注意是纯文本文件，不是你的 mp3，也不是 mp4 啥的。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在linux系统下使用awk工具详解&quot;&gt;&lt;a href=&quot;#在linux系统下使用awk工具详解&quot; class=&quot;headerlink&quot; title=&quot;在linux系统下使用awk工具详解&quot;&gt;&lt;/a&gt;在linux系统下使用awk工具详解&lt;/h3&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.lijiawang.org/categories/Linux/"/>
    
    
      <category term="awk" scheme="https://www.lijiawang.org/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>网卡Bond介绍</title>
    <link href="https://www.lijiawang.org/posts/linux-bond.html"/>
    <id>https://www.lijiawang.org/posts/linux-bond.html</id>
    <published>2017-05-27T10:33:51.000Z</published>
    <updated>2017-05-27T14:03:26.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网卡Bond介绍"><a href="#网卡Bond介绍" class="headerlink" title="网卡Bond介绍"></a>网卡Bond介绍</h3><a id="more"></a>
<h3 id="总括"><a href="#总括" class="headerlink" title="总括"></a>总括</h3><p>  Bond技术即bonding，它是一个Linux内核的一个模块，能将多块物理网卡绑定到一张虚拟网卡上的技术，并通过修改Linux的网口驱动让多块网卡看起来是一个单独的以太网接口设备并具有相同的 IP 地址。Bond技术一般用于解决网卡的单点故障或用于网卡负载较高的场景。</p>
<p>  Bond 的网卡运行在混杂模式(Promisc)下。在正常情况下，网卡只接收目的硬件地址(MAC Address)是自身MAC的以太网帧，过滤其他数据帧，以减轻驱动程序的负担。但是网卡也支持另外一种被称为混杂的模式，运行在此模式下的网卡可以接收网络上所有的数据帧。bonding就运行在这种模式下，而且修改了驱动程序中的MAC地址，将两张或多张网卡的MAC地址改成同一MAC地址。</p>
<p>网卡的bond模式一共有7种，下面详细介绍。</p>
<h3 id="模式0"><a href="#模式0" class="headerlink" title="模式0"></a>模式0</h3><p>  模式0（mode=0，round-robin）：此模式使用轮询策略，即顺序的在每一个被bond的网卡上发送数据包，这种模式提供负载均衡和容错能力。Bond0可以保证bond虚拟网卡和被bond的两张或多张物理网卡拥有相同的MAC地址，其中bond虚拟网卡的MAC地址是其中一张物理网卡的MAC地址，而bond虚拟网卡的MAC地址是根据bond自己实现的一个算法来选择的。<br>  在bond0模式下，如果一个连接或者会话的数据包从不同的网口发出，途中再经过不同的链路，则在客户端很有可能会出现数据包无序到达的现象，而无序到达的数据包一般需要重新发送，这样网络的吞吐量就会下降。同时，如果做bond0的两张或多张网卡接到了同一交换机上，还需对其配置聚合模式。</p>
<h3 id="模式1"><a href="#模式1" class="headerlink" title="模式1"></a>模式1</h3><p>  模式1（mode=1，active-backup）：此模式使用主被策略（热备）。在所有做bond1的物理网卡中，同一时刻只有一张网卡被激活，当且仅当活动网卡失效时才会激活其他的网卡。这种模式下做bond的两张或多张网卡的MAC地址和Bond虚拟网卡的MAC地址相同，而Bond的MAC地址是Bond创建启动后活动网卡（Active Slave）的MAC地址。这种模式要求主被网卡能快速的切换，即当主网卡出现故障后能迅速地切换至备用网卡。切换过程中，上层的应用几乎不受影响，因为Bond的驱动程序会临时接管上层应用的数据包，存放至数据缓冲区，等待备用网卡启动后再发送出去。但是如果切换时间过长，则会引起缓冲区的溢出，导致丢包。</p>
<h3 id="模式2"><a href="#模式2" class="headerlink" title="模式2"></a>模式2</h3><p>  模式2（mode=2，balance-xor）：xor为异或运算(二进制位相异为1，相同为0)。此模式的默认选择策略是：<br>选择网卡的序号=(源MAC地址 XOR 目标MAC地址) % Slave网卡（从网卡）的数量。<br>  其他的传输策略可以通过xmit_hash_policy配置项指定。</p>
<h3 id="模式3"><a href="#模式3" class="headerlink" title="模式3"></a>模式3</h3><p>  模式3（mode=3，broadcast）：使用广播策略，数据包会被广播至所有Slave网卡进行传送。</p>
<h3 id="模式4"><a href="#模式4" class="headerlink" title="模式4"></a>模式4</h3><p>  模式4（mode=4，802.3ad）：使用动态链接聚合策略，启动时会创建一个聚合组，所有Slave网卡共享同样的速率和双工设定。<br>必要条件：<br>  1．支持使用ethtool工具获取每个slave网卡的速率和双工设定；<br>  2．需要交换机支持IEEE 802.3ad 动态链路聚合（Dynamic link aggregation）模式</p>
<h3 id="模式5"><a href="#模式5" class="headerlink" title="模式5"></a>模式5</h3><p>  模式5（mode=5，balance-tlbtransmitload balancing）：基于每个slave网卡的速率选择传输网卡。<br>  必要条件：支持使用ethtool工具获取每个slave网卡的速率。</p>
<h3 id="模式6"><a href="#模式6" class="headerlink" title="模式6"></a>模式6</h3><p>  模式6（mode=6，balance-alb，Adaptive load balancing）：该模式包含了bond5模式，同时还支持对IPV4流量接收时的负载均衡策略(receive load balance, rlb)，而且不需要任何交换机的支持。<br>必要条件：</p>
<ol>
<li>ethtool支持获取每个slave的速率；</li>
<li>底层驱动支持设置某个网卡设备的硬件地址。</li>
</ol>
<h3 id="优劣比较"><a href="#优劣比较" class="headerlink" title="优劣比较"></a>优劣比较</h3><p>7中bond模式对比如下<br><img src="https://ljw.howieli.cn/blog/2017-5-27/bond.png" alt=""><br>  在7种模式中，最为常用的是bond0和bond1。在网络流量较大的场景下推荐使用bond0；在可靠性要求较高的场景下推荐使用bond1。</p>
<h3 id="实践操作"><a href="#实践操作" class="headerlink" title="实践操作"></a>实践操作</h3><p>下面以bond0为例，介绍一下bond的基本配置。具体步骤如下：</p>
<ol>
<li><p>配置前查看是否开启bond模块：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">modinfo bonding</div></pre></td></tr></table></figure>
</li>
<li><p>创建bond0网卡配置文件如下：  </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network-scripts/ifcfg-bond0:</div><div class="line">    DEVICE=bond0</div><div class="line">    ONBOOT=yes #自动启动</div><div class="line">    BOOTPROTO=dhcp #可以选择dhcp，static，none</div><div class="line">    USERCTL=no #该设备只能由root控制</div><div class="line">    NM_CONTROLLED=no #不需要重启网卡，实时生效</div><div class="line">    TYPE=Ethernet    #如选DHCP则需要配置IP地址等信息</div><div class="line">    #IPADDR=10.0.2.10</div><div class="line">    #NETMASK=255.255.255.0</div><div class="line">    #GATEWAY=10.0.2.1</div><div class="line">    #BONDING_OPTS="mode=0 miimon=100fail_over_mac=1"</div><div class="line">    #如果使用了BONDING_OPTS选项，则不需要再使用/etc/modprobe.conf 配置文件对绑定设备进行配置。</div></pre></td></tr></table></figure>
</li>
<li><p>配置被bond的网卡。Bonding接口创建以后，被绑定的网卡必须在他们的设置文件里面添加MASTER和SLAVE两个参数。如eth0的配置如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0:</div><div class="line">    DEVICE=eth0</div><div class="line">    ONBOOT=yes</div><div class="line">    BOOTPROTO=none</div><div class="line">    USERCTL=no</div><div class="line">    NM_CONTROLLED=no</div><div class="line">    MASTER=bond0 #属于哪个bond</div><div class="line">    SLAVE=yes #是否为从网卡，即是否被做bond</div></pre></td></tr></table></figure>
</li>
<li><p>创建并编辑<code>/etc/modprobe.d/bond.conf</code>文件，使系统在启动时加载bonding模块。添加：<br><code>alias bond0 bonding</code> //使系统在启动时加载bonding模块，对外虚拟网络接口设备为 bond0<br><code>options bond0 miimon=100 mode=0 fail_over_mac=1</code><br>其中miimon是用来进行链路监测的，其原理是检测网上的链路状态，一般将miimon值设为100，表示系统每100ms监测一次链路连接状态，如果有一条线路不通就转入另一条线路。bonding定义了网卡的4个链路状态：正常状态(BOND_LINK_UP)、网卡出现故障(BOND_LINK_FAIL)、失效状态(BOND_LINK_DOWN)和恢复状态(BOND_LINK_BACK)。<br>fail_over_mac默认等于0，当发生错误时只修改slave网卡的MAC地址而不修改bond的MAC地址；fail_over_mac=1时，当发生错误时只修改bond网卡的MAC地址而不修改slave网卡的MAC地址。这个选项只在虚拟机上进行测试时开启，如果使用物理机则不需配置。</p>
</li>
<li><p>重启机器，使用<code>cat /proc/net/bonding/bondX</code>命令查看bond配置是否生效。<br> 注：必须关闭NetworkManger服务，否则会和bond冲突</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;网卡Bond介绍&quot;&gt;&lt;a href=&quot;#网卡Bond介绍&quot; class=&quot;headerlink&quot; title=&quot;网卡Bond介绍&quot;&gt;&lt;/a&gt;网卡Bond介绍&lt;/h3&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.lijiawang.org/categories/Linux/"/>
    
    
      <category term="linux bond" scheme="https://www.lijiawang.org/tags/linux-bond/"/>
    
  </entry>
  
  <entry>
    <title>Tmux Linux 分屏工具</title>
    <link href="https://www.lijiawang.org/posts/linux-tmux.html"/>
    <id>https://www.lijiawang.org/posts/linux-tmux.html</id>
    <published>2017-05-27T10:13:32.000Z</published>
    <updated>2017-05-27T10:26:12.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tmux介绍"><a href="#tmux介绍" class="headerlink" title="tmux介绍"></a>tmux介绍</h3><a id="more"></a>
<p>tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。<br>有一本关于Tmux的书tmux：<a href="https://www.amazon.com/tmux-Productive-Development-Brian-Hogan/dp/1934356964" target="_blank" rel="external">Productive Mouse-Free Development</a><br>自己在centos7.2系统上简单的使用了一下</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> yum install tmux -y</span></div></pre></td></tr></table></figure>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Ctrl+b ? 显示快捷键帮助</div><div class="line">Ctrl+b C-o 调换窗口位置，类似与vim 里的C-w</div><div class="line">Ctrl+b 空格键 采用下一个内置布局</div><div class="line">Ctrl+b ! 把当前窗口变为新窗口</div><div class="line">Ctrl+b “ 横向分隔窗口</div><div class="line">Ctrl+b % 纵向分隔窗口</div><div class="line">Ctrl+b q 显示分隔窗口的编号</div><div class="line">Ctrl+b o 跳到下一个分隔窗口</div><div class="line">Ctrl+b 上下键 上一个及下一个分隔窗口</div><div class="line">Ctrl+b C-方向键 调整分隔窗口大小</div><div class="line">Ctrl+b c 创建新窗口</div><div class="line">Ctrl+b 0~9 选择几号窗口</div><div class="line">Ctrl+b c 创建新窗口</div><div class="line">Ctrl+b n 选择下一个窗口</div><div class="line">Ctrl+b l 切换到最后使用的窗口</div><div class="line">Ctrl+b p 选择前一个窗口</div><div class="line">Ctrl+b w 以菜单方式显示及选择窗口</div><div class="line">Ctrl+b t 显示时钟</div><div class="line">Ctrl+b ; 切换到最后一个使用的面板</div><div class="line">Ctrl+b x 关闭面板</div><div class="line">Ctrl+b &amp; 关闭窗口</div><div class="line">Ctrl+b s 以菜单方式显示和选择会话</div><div class="line">Ctrl+b d 退出tumx，并保存当前会话，这时，tmux仍在后台运行，可以通过tmux attach进入 到指定的会话</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;tmux介绍&quot;&gt;&lt;a href=&quot;#tmux介绍&quot; class=&quot;headerlink&quot; title=&quot;tmux介绍&quot;&gt;&lt;/a&gt;tmux介绍&lt;/h3&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.lijiawang.org/categories/Linux/"/>
    
    
      <category term="tmux" scheme="https://www.lijiawang.org/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>Openstack Ocata vxlan模式搭建</title>
    <link href="https://www.lijiawang.org/posts/openstack-ocata.html"/>
    <id>https://www.lijiawang.org/posts/openstack-ocata.html</id>
    <published>2017-05-27T03:17:20.000Z</published>
    <updated>2017-05-27T04:35:49.751Z</updated>
    
    <content type="html"><![CDATA[<h3 id="手动搭建分布式Openstack-Ocata-vxlan模式"><a href="#手动搭建分布式Openstack-Ocata-vxlan模式" class="headerlink" title="手动搭建分布式Openstack Ocata vxlan模式 "></a>手动搭建分布式Openstack Ocata vxlan模式 <a id="more"></a></h3><h4 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h4><h5 id="1、前提准备"><a href="#1、前提准备" class="headerlink" title="1、前提准备"></a>1、前提准备</h5><p>  安装vmaware workstation12.50，虚拟机三台，配置至少cpu4c MEM 4G虚拟机</p>
<h5 id="2、更改hostname"><a href="#2、更改hostname" class="headerlink" title="2、更改hostname"></a>2、更改hostname</h5><p>  如果是controller就运行<br>  <code># hostnameecal set-hostname controller</code><br>参考文章<a href="https://docs.openstack.org/ocata/install-guide-rdo/" target="_blank" rel="external">openstack</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;手动搭建分布式Openstack-Ocata-vxlan模式&quot;&gt;&lt;a href=&quot;#手动搭建分布式Openstack-Ocata-vxlan模式&quot; class=&quot;headerlink&quot; title=&quot;手动搭建分布式Openstack Ocata vxlan模式 &quot;&gt;&lt;/a&gt;手动搭建分布式Openstack Ocata vxlan模式
    
    </summary>
    
      <category term="openstack" scheme="https://www.lijiawang.org/categories/openstack/"/>
    
    
      <category term="openstack" scheme="https://www.lijiawang.org/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>openstack实例启动流程</title>
    <link href="https://www.lijiawang.org/posts/openstack-blog.html"/>
    <id>https://www.lijiawang.org/posts/openstack-blog.html</id>
    <published>2017-05-26T00:23:34.000Z</published>
    <updated>2017-05-27T02:55:50.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="openstack实例启动流程"><a href="#openstack实例启动流程" class="headerlink" title="openstack实例启动流程"></a>openstack实例启动流程</h3><a id="more"></a>
<p><img src="https://ljw.howieli.cn/blog/2017-5-26/openstack.png" alt=""><br>1.客户端使用自己的用户名密码请求认证。<br>2.keystone通过查询在keystone的数据库user表中保存了user的相关信息，包括password加密后的hash值，并返回一个token_id（令牌），和serviceCatalog(一些服务的endpoint地址，cinder、glance-api后面下载镜像和创建块存储时会用到)。<br>3.客户端带上keystone返回的token_id和创建虚机的相关参数，Post请求nova-api创建虚拟机<br>4.nova-api接收到请求后，首先使用请求携带的token_id来访问该api，以验证请求是否有效。<br>5.keystone验证通过后返回更新后的认证信息。<br>6.nova api检查创建虚拟机参数是否有效与合法。<br>检查虚拟机name是否符合命名规范，flavor_id是否在数据库中存在，image_uuid是否是正确的uuid格式<br>检查instance、vcpu、ram的数量是否超过配额。<br>7.当且仅当所有传参都有效合法时，更新nova数据库，新建一条instance记录，vm_states设为BUILDING，task_state设为SCHEDULING.<br>8.nova api 远程调用传递请求、参数给nova scheduler，把消息“请给我创建一台虚拟机”丢到消息队列，然后定期查询虚机的状态。<br>9.nova scheduler从queue中获取到这条消息<br>10.nova scheduler访问nova 数据库，通过调度算法，过滤出一些合适的计算节点，然后进行排序。<br>11.更新虚机节点信息，返回一个最优节点id给nova scheduler。<br>12.nova scheduler选定host之后，通过rpc调用nova-compute服务，把“创建虚机请求”消息丢个mq。<br>13.nova compute收到创建虚拟机请求的消息<br>nova-compute有个定时任务，定期从数据库中查找到运行在该节点上的所有虚拟机信息，统计得到空闲内存大小和空闲磁盘大小。然后更新数据库compute_node信息，以保证调度的准确性。<br>14.nova compute通过rpc查询nova数据库中虚机的信息例如主机模板和id<br>15.nova conductor从消息队列中拿到请求查询数据库<br>16.nova conductor查询nova数据库<br>17.数据库返回虚机信息<br>18.nova compute从消息队列中获取信息。<br>19.nova compute 请求glance 的rest api，下载所需要的镜像，一般是qcow2的。<br>20.glance api 也会去验证请求的token的有效性。<br>21.glance api 返回镜像信息给nova-compute。<br>22.同理，nova compute请求neutron api配置网络，例如获取虚机ip地址<br>23.验证token的有效性<br>24.neutron返回网络信息<br>25-27 同glance、neutron验证token返回块设备信息<br>28.据上面配置的虚拟机信息，生成xml，写入libvirt,xml文件，然后调用libvirt driver去使用libvirt.xml文件启动虚拟机。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;openstack实例启动流程&quot;&gt;&lt;a href=&quot;#openstack实例启动流程&quot; class=&quot;headerlink&quot; title=&quot;openstack实例启动流程&quot;&gt;&lt;/a&gt;openstack实例启动流程&lt;/h3&gt;
    
    </summary>
    
      <category term="openstack" scheme="https://www.lijiawang.org/categories/openstack/"/>
    
    
      <category term="openstack" scheme="https://www.lijiawang.org/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>python环境准备</title>
    <link href="https://www.lijiawang.org/posts/python-blog.html"/>
    <id>https://www.lijiawang.org/posts/python-blog.html</id>
    <published>2017-05-23T09:16:22.000Z</published>
    <updated>2017-05-23T09:35:17.778Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pyenv配置"><a href="#pyenv配置" class="headerlink" title="pyenv配置"></a>pyenv配置</h3><a id="more"></a>
<ol>
<li>安装git <code>yum -y install git</code></li>
<li>安装pyenv <code>curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</code></li>
<li><p>配置环境变量，在<code>~/.bash_profile</code>里增加。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> PATH=<span class="string">"~/.pyenv/bin:<span class="variable">$PATH</span>"</span></div><div class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></div><div class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>安装编译工具<code>yum -y install gcc make patch</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;pyenv配置&quot;&gt;&lt;a href=&quot;#pyenv配置&quot; class=&quot;headerlink&quot; title=&quot;pyenv配置&quot;&gt;&lt;/a&gt;pyenv配置&lt;/h3&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.lijiawang.org/categories/python/"/>
    
    
      <category term="python" scheme="https://www.lijiawang.org/tags/python/"/>
    
  </entry>
  
</feed>
